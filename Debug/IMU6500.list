
IMU6500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f60  08006f60  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f68  08006f68  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000088  08006ff8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08006ff8  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118b2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b9  00000000  00000000  0003196a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00033a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00034700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002534c  00000000  00000000  00035310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011298  00000000  00000000  0005a65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec6aa  00000000  00000000  0006b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157f9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  00157ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006eb8 	.word	0x08006eb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	08006eb8 	.word	0x08006eb8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <GY6500_init>:
float eInt[3] = {0.0f, 0.0f, 0.0f};       // vector to hold integral error for Mahony method

float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)
float a12, a22, a31, a32, a33;            // rotation matrix coefficients for Euler angles and gravity components

void GY6500_init(I2C_HandleTypeDef *hi2c){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer;
	uint8_t writeBuffer;

	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);  //MPU9250 should return 0x71 back is everything was fine
 8000d60:	2332      	movs	r3, #50	; 0x32
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	2301      	movs	r3, #1
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	f107 030f 	add.w	r3, r7, #15
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2275      	movs	r2, #117	; 0x75
 8000d72:	21d0      	movs	r1, #208	; 0xd0
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f003 faa3 	bl	80042c0 <HAL_I2C_Mem_Read>

	if(readBuffer == 0x71){
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b71      	cmp	r3, #113	; 0x71
 8000d7e:	d144      	bne.n	8000e0a <GY6500_init+0xb2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2120      	movs	r1, #32
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f003 f896 	bl	8003eb8 <HAL_GPIO_WritePin>

		//Calibrate gyro and accelrometers, load biases in bias registers
		MPU9250_Calibrate(hi2c, gyrobias, accelbias);
 8000d8c:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <GY6500_init+0xc8>)
 8000d8e:	4925      	ldr	r1, [pc, #148]	; (8000e24 <GY6500_init+0xcc>)
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 ffff 	bl	8001d94 <MPU9250_Calibrate>
		HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f002 fdd9 	bl	8003950 <HAL_Delay>

		//init Gyro and Accelerometer
		MPU9250_init(hi2c);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 ff16 	bl	8001bd0 <MPU9250_init>

		//enable Mag bypass
		writeBuffer = 0x22;
 8000da4:	2322      	movs	r3, #34	; 0x22
 8000da6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8000da8:	2332      	movs	r3, #50	; 0x32
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2301      	movs	r3, #1
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	f107 030e 	add.w	r3, r7, #14
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	2237      	movs	r2, #55	; 0x37
 8000dba:	21d0      	movs	r1, #208	; 0xd0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f003 f96b 	bl	8004098 <HAL_I2C_Mem_Write>

		//Get magnetometer calibration from AK8963 ROM
		AK8963_init(hi2c, magCalibration);  // Initialize device for active mode read of magnetometer
 8000dc2:	4919      	ldr	r1, [pc, #100]	; (8000e28 <GY6500_init+0xd0>)
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 fcd5 	bl	8001774 <AK8963_init>

		AK8963_Calibrate(hi2c, magBias, magScale);
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <GY6500_init+0xd4>)
 8000dcc:	4918      	ldr	r1, [pc, #96]	; (8000e30 <GY6500_init+0xd8>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 fda6 	bl	8001920 <AK8963_Calibrate>
		HAL_Delay(1000);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd8:	f002 fdba 	bl	8003950 <HAL_Delay>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ddc:	2120      	movs	r1, #32
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f003 f881 	bl	8003ee8 <HAL_GPIO_TogglePin>
		HAL_Delay(150);
 8000de6:	2096      	movs	r0, #150	; 0x96
 8000de8:	f002 fdb2 	bl	8003950 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000dec:	2120      	movs	r1, #32
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f003 f879 	bl	8003ee8 <HAL_GPIO_TogglePin>
		HAL_Delay(150);
 8000df6:	2096      	movs	r0, #150	; 0x96
 8000df8:	f002 fdaa 	bl	8003950 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2120      	movs	r1, #32
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e04:	f003 f858 	bl	8003eb8 <HAL_GPIO_WritePin>
	}

	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
	}
}
 8000e08:	e005      	b.n	8000e16 <GY6500_init+0xbe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f003 f851 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000d4 	.word	0x200000d4
 8000e24:	200000c8 	.word	0x200000c8
 8000e28:	200000f8 	.word	0x200000f8
 8000e2c:	200000ec 	.word	0x200000ec
 8000e30:	200000e0 	.word	0x200000e0
 8000e34:	00000000 	.word	0x00000000

08000e38 <allRead>:

void allRead(I2C_HandleTypeDef *hi2c, MPU9250 *DataStruct){
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	ed2d 8b04 	vpush	{d8-d9}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af04      	add	r7, sp, #16
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	uint8_t readBuffer;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, INT_STATUS, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8000e46:	2332      	movs	r3, #50	; 0x32
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 030f 	add.w	r3, r7, #15
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	223a      	movs	r2, #58	; 0x3a
 8000e58:	21d0      	movs	r1, #208	; 0xd0
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f003 fa30 	bl	80042c0 <HAL_I2C_Mem_Read>
	if (readBuffer & 0x01) {  // On interrupt, check if data ready interrupt
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 80fc 	beq.w	8001064 <allRead+0x22c>
		setAccelRes();
 8000e6c:	f000 fba0 	bl	80015b0 <setAccelRes>
		readAccel(hi2c, accelOut);
 8000e70:	49bf      	ldr	r1, [pc, #764]	; (8001170 <allRead+0x338>)
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fbcc 	bl	8001610 <readAccel>

		ax = (float)accelOut[0] * accelRes;
 8000e78:	4bbd      	ldr	r3, [pc, #756]	; (8001170 <allRead+0x338>)
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e86:	4bbb      	ldr	r3, [pc, #748]	; (8001174 <allRead+0x33c>)
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e90:	4bb9      	ldr	r3, [pc, #740]	; (8001178 <allRead+0x340>)
 8000e92:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelOut[1] * accelRes;
 8000e96:	4bb6      	ldr	r3, [pc, #728]	; (8001170 <allRead+0x338>)
 8000e98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea4:	4bb3      	ldr	r3, [pc, #716]	; (8001174 <allRead+0x33c>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eae:	4bb3      	ldr	r3, [pc, #716]	; (800117c <allRead+0x344>)
 8000eb0:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelOut[2] * accelRes;
 8000eb4:	4bae      	ldr	r3, [pc, #696]	; (8001170 <allRead+0x338>)
 8000eb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec2:	4bac      	ldr	r3, [pc, #688]	; (8001174 <allRead+0x33c>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	4bac      	ldr	r3, [pc, #688]	; (8001180 <allRead+0x348>)
 8000ece:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX = ax;
 8000ed2:	4ba9      	ldr	r3, [pc, #676]	; (8001178 <allRead+0x340>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8000eda:	4ba8      	ldr	r3, [pc, #672]	; (800117c <allRead+0x344>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8000ee2:	4ba7      	ldr	r3, [pc, #668]	; (8001180 <allRead+0x348>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	609a      	str	r2, [r3, #8]

		setGyroRes();
 8000eea:	f000 fb2d 	bl	8001548 <setGyroRes>
		readGyro(hi2c, gyroOut);
 8000eee:	49a5      	ldr	r1, [pc, #660]	; (8001184 <allRead+0x34c>)
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fbc0 	bl	8001676 <readGyro>

		gx = (float)gyroOut[0] * gyroRes;
 8000ef6:	4ba3      	ldr	r3, [pc, #652]	; (8001184 <allRead+0x34c>)
 8000ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f04:	4ba0      	ldr	r3, [pc, #640]	; (8001188 <allRead+0x350>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0e:	4b9f      	ldr	r3, [pc, #636]	; (800118c <allRead+0x354>)
 8000f10:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroOut[1] * gyroRes;
 8000f14:	4b9b      	ldr	r3, [pc, #620]	; (8001184 <allRead+0x34c>)
 8000f16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	4b99      	ldr	r3, [pc, #612]	; (8001188 <allRead+0x350>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2c:	4b98      	ldr	r3, [pc, #608]	; (8001190 <allRead+0x358>)
 8000f2e:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroOut[2] * gyroRes;
 8000f32:	4b94      	ldr	r3, [pc, #592]	; (8001184 <allRead+0x34c>)
 8000f34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f40:	4b91      	ldr	r3, [pc, #580]	; (8001188 <allRead+0x350>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4a:	4b92      	ldr	r3, [pc, #584]	; (8001194 <allRead+0x35c>)
 8000f4c:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX = gx;
 8000f50:	4b8e      	ldr	r3, [pc, #568]	; (800118c <allRead+0x354>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8000f58:	4b8d      	ldr	r3, [pc, #564]	; (8001190 <allRead+0x358>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8000f60:	4b8c      	ldr	r3, [pc, #560]	; (8001194 <allRead+0x35c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	615a      	str	r2, [r3, #20]

		setMagRes();
 8000f68:	f000 fad0 	bl	800150c <setMagRes>
		readMag(hi2c, magOut);
 8000f6c:	498a      	ldr	r1, [pc, #552]	; (8001198 <allRead+0x360>)
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fbb4 	bl	80016dc <readMag>
		mx = (float)magOut[0] * magRes * magCalibration[0] - magBias[0];
 8000f74:	4b88      	ldr	r3, [pc, #544]	; (8001198 <allRead+0x360>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f82:	4b86      	ldr	r3, [pc, #536]	; (800119c <allRead+0x364>)
 8000f84:	edd3 7a00 	vldr	s15, [r3]
 8000f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8c:	4b84      	ldr	r3, [pc, #528]	; (80011a0 <allRead+0x368>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	4b83      	ldr	r3, [pc, #524]	; (80011a4 <allRead+0x36c>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	4b81      	ldr	r3, [pc, #516]	; (80011a8 <allRead+0x370>)
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magOut[1] * magRes * magCalibration[1] - magBias[1];
 8000fa6:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <allRead+0x360>)
 8000fa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb4:	4b79      	ldr	r3, [pc, #484]	; (800119c <allRead+0x364>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbe:	4b78      	ldr	r3, [pc, #480]	; (80011a0 <allRead+0x368>)
 8000fc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc8:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <allRead+0x36c>)
 8000fca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd2:	4b76      	ldr	r3, [pc, #472]	; (80011ac <allRead+0x374>)
 8000fd4:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magOut[2] * magRes * magCalibration[2] - magBias[2];
 8000fd8:	4b6f      	ldr	r3, [pc, #444]	; (8001198 <allRead+0x360>)
 8000fda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe6:	4b6d      	ldr	r3, [pc, #436]	; (800119c <allRead+0x364>)
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff0:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <allRead+0x368>)
 8000ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffa:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <allRead+0x36c>)
 8000ffc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <allRead+0x378>)
 8001006:	edc3 7a00 	vstr	s15, [r3]
		mx *= magScale[0];
 800100a:	4b6a      	ldr	r3, [pc, #424]	; (80011b4 <allRead+0x37c>)
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <allRead+0x370>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <allRead+0x370>)
 800101c:	edc3 7a00 	vstr	s15, [r3]
		my *= magScale[1];
 8001020:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <allRead+0x37c>)
 8001022:	ed93 7a01 	vldr	s14, [r3, #4]
 8001026:	4b61      	ldr	r3, [pc, #388]	; (80011ac <allRead+0x374>)
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <allRead+0x374>)
 8001032:	edc3 7a00 	vstr	s15, [r3]
		mz *= magScale[2];
 8001036:	4b5f      	ldr	r3, [pc, #380]	; (80011b4 <allRead+0x37c>)
 8001038:	ed93 7a02 	vldr	s14, [r3, #8]
 800103c:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <allRead+0x378>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <allRead+0x378>)
 8001048:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->MagnX = mx;
 800104c:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <allRead+0x370>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	619a      	str	r2, [r3, #24]
		DataStruct->MagnY = my;
 8001054:	4b55      	ldr	r3, [pc, #340]	; (80011ac <allRead+0x374>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	61da      	str	r2, [r3, #28]
		DataStruct->MagnZ = mz;
 800105c:	4b54      	ldr	r3, [pc, #336]	; (80011b0 <allRead+0x378>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	621a      	str	r2, [r3, #32]
	}

	now = HAL_GetTick();
 8001064:	f002 fc68 	bl	8003938 <HAL_GetTick>
 8001068:	4603      	mov	r3, r0
 800106a:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <allRead+0x380>)
 800106c:	6013      	str	r3, [r2, #0]
	deltaT = ((now - lastUpdate) / 1000.0); // set integration time by time elapsed since last filter update
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <allRead+0x380>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b52      	ldr	r3, [pc, #328]	; (80011bc <allRead+0x384>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa0f 	bl	800049c <__aeabi_ui2d>
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <allRead+0x388>)
 8001084:	f7ff fbae 	bl	80007e4 <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fc90 	bl	80009b4 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <allRead+0x38c>)
 8001098:	6013      	str	r3, [r2, #0]
	lastUpdate = now;
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <allRead+0x380>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a47      	ldr	r2, [pc, #284]	; (80011bc <allRead+0x384>)
 80010a0:	6013      	str	r3, [r2, #0]
	sum += deltaT; // sum for averaging filter update rate
 80010a2:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <allRead+0x390>)
 80010a4:	ed93 7a00 	vldr	s14, [r3]
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <allRead+0x38c>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <allRead+0x390>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx * M_PI / 180.0f, gy * M_PI / 180.0f, gz * M_PI / 180.0f,  my,  mx, mz);
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <allRead+0x340>)
 80010ba:	ed93 8a00 	vldr	s16, [r3]
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <allRead+0x344>)
 80010c0:	edd3 8a00 	vldr	s17, [r3]
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <allRead+0x348>)
 80010c6:	ed93 9a00 	vldr	s18, [r3]
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <allRead+0x354>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa06 	bl	80004e0 <__aeabi_f2d>
 80010d4:	a324      	add	r3, pc, #144	; (adr r3, 8001168 <allRead+0x330>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa59 	bl	8000590 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <allRead+0x394>)
 80010ec:	f7ff fb7a 	bl	80007e4 <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fc5c 	bl	80009b4 <__aeabi_d2f>
 80010fc:	4604      	mov	r4, r0
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <allRead+0x358>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f9ec 	bl	80004e0 <__aeabi_f2d>
 8001108:	a317      	add	r3, pc, #92	; (adr r3, 8001168 <allRead+0x330>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa3f 	bl	8000590 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <allRead+0x394>)
 8001120:	f7ff fb60 	bl	80007e4 <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc42 	bl	80009b4 <__aeabi_d2f>
 8001130:	4605      	mov	r5, r0
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <allRead+0x35c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9d2 	bl	80004e0 <__aeabi_f2d>
 800113c:	a30a      	add	r3, pc, #40	; (adr r3, 8001168 <allRead+0x330>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa25 	bl	8000590 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <allRead+0x394>)
 8001154:	f7ff fb46 	bl	80007e4 <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fc28 	bl	80009b4 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	e033      	b.n	80011d0 <allRead+0x398>
 8001168:	54442d18 	.word	0x54442d18
 800116c:	400921fb 	.word	0x400921fb
 8001170:	200000b8 	.word	0x200000b8
 8001174:	200000a8 	.word	0x200000a8
 8001178:	20000120 	.word	0x20000120
 800117c:	20000124 	.word	0x20000124
 8001180:	20000128 	.word	0x20000128
 8001184:	200000b0 	.word	0x200000b0
 8001188:	200000a4 	.word	0x200000a4
 800118c:	2000012c 	.word	0x2000012c
 8001190:	20000130 	.word	0x20000130
 8001194:	20000134 	.word	0x20000134
 8001198:	200000c0 	.word	0x200000c0
 800119c:	200000ac 	.word	0x200000ac
 80011a0:	200000f8 	.word	0x200000f8
 80011a4:	200000e0 	.word	0x200000e0
 80011a8:	20000138 	.word	0x20000138
 80011ac:	2000013c 	.word	0x2000013c
 80011b0:	20000140 	.word	0x20000140
 80011b4:	200000ec 	.word	0x200000ec
 80011b8:	2000011c 	.word	0x2000011c
 80011bc:	20000118 	.word	0x20000118
 80011c0:	408f4000 	.word	0x408f4000
 80011c4:	20000110 	.word	0x20000110
 80011c8:	20000114 	.word	0x20000114
 80011cc:	40668000 	.word	0x40668000
 80011d0:	4bb9      	ldr	r3, [pc, #740]	; (80014b8 <allRead+0x680>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	4bb9      	ldr	r3, [pc, #740]	; (80014bc <allRead+0x684>)
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	4bb8      	ldr	r3, [pc, #736]	; (80014c0 <allRead+0x688>)
 80011de:	edd3 6a00 	vldr	s13, [r3]
 80011e2:	eeb0 4a66 	vmov.f32	s8, s13
 80011e6:	eef0 3a47 	vmov.f32	s7, s14
 80011ea:	eeb0 3a67 	vmov.f32	s6, s15
 80011ee:	ee02 2a90 	vmov	s5, r2
 80011f2:	ee02 5a10 	vmov	s4, r5
 80011f6:	ee01 4a90 	vmov	s3, r4
 80011fa:	eeb0 1a49 	vmov.f32	s2, s18
 80011fe:	eef0 0a68 	vmov.f32	s1, s17
 8001202:	eeb0 0a48 	vmov.f32	s0, s16
 8001206:	f001 f9eb 	bl	80025e0 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 800120a:	4bae      	ldr	r3, [pc, #696]	; (80014c4 <allRead+0x68c>)
 800120c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001210:	4bac      	ldr	r3, [pc, #688]	; (80014c4 <allRead+0x68c>)
 8001212:	edd3 7a02 	vldr	s15, [r3, #8]
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	4baa      	ldr	r3, [pc, #680]	; (80014c4 <allRead+0x68c>)
 800121c:	edd3 6a00 	vldr	s13, [r3]
 8001220:	4ba8      	ldr	r3, [pc, #672]	; (80014c4 <allRead+0x68c>)
 8001222:	edd3 7a03 	vldr	s15, [r3, #12]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	4ba5      	ldr	r3, [pc, #660]	; (80014c8 <allRead+0x690>)
 8001234:	edc3 7a00 	vstr	s15, [r3]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8001238:	4ba2      	ldr	r3, [pc, #648]	; (80014c4 <allRead+0x68c>)
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	4ba1      	ldr	r3, [pc, #644]	; (80014c4 <allRead+0x68c>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001248:	4b9e      	ldr	r3, [pc, #632]	; (80014c4 <allRead+0x68c>)
 800124a:	edd3 6a01 	vldr	s13, [r3, #4]
 800124e:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <allRead+0x68c>)
 8001250:	edd3 7a01 	vldr	s15, [r3, #4]
 8001254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001258:	ee37 7a27 	vadd.f32	s14, s14, s15
 800125c:	4b99      	ldr	r3, [pc, #612]	; (80014c4 <allRead+0x68c>)
 800125e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001262:	4b98      	ldr	r3, [pc, #608]	; (80014c4 <allRead+0x68c>)
 8001264:	edd3 7a02 	vldr	s15, [r3, #8]
 8001268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001270:	4b94      	ldr	r3, [pc, #592]	; (80014c4 <allRead+0x68c>)
 8001272:	edd3 6a03 	vldr	s13, [r3, #12]
 8001276:	4b93      	ldr	r3, [pc, #588]	; (80014c4 <allRead+0x68c>)
 8001278:	edd3 7a03 	vldr	s15, [r3, #12]
 800127c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001284:	4b91      	ldr	r3, [pc, #580]	; (80014cc <allRead+0x694>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 800128a:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <allRead+0x68c>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	4b8c      	ldr	r3, [pc, #560]	; (80014c4 <allRead+0x68c>)
 8001292:	edd3 7a01 	vldr	s15, [r3, #4]
 8001296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129a:	4b8a      	ldr	r3, [pc, #552]	; (80014c4 <allRead+0x68c>)
 800129c:	edd3 6a02 	vldr	s13, [r3, #8]
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <allRead+0x68c>)
 80012a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012b2:	4b87      	ldr	r3, [pc, #540]	; (80014d0 <allRead+0x698>)
 80012b4:	edc3 7a00 	vstr	s15, [r3]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 80012b8:	4b82      	ldr	r3, [pc, #520]	; (80014c4 <allRead+0x68c>)
 80012ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <allRead+0x68c>)
 80012c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c8:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <allRead+0x68c>)
 80012ca:	edd3 6a00 	vldr	s13, [r3]
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <allRead+0x68c>)
 80012d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e0:	4b7c      	ldr	r3, [pc, #496]	; (80014d4 <allRead+0x69c>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 80012e6:	4b77      	ldr	r3, [pc, #476]	; (80014c4 <allRead+0x68c>)
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	4b75      	ldr	r3, [pc, #468]	; (80014c4 <allRead+0x68c>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f6:	4b73      	ldr	r3, [pc, #460]	; (80014c4 <allRead+0x68c>)
 80012f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80012fc:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <allRead+0x68c>)
 80012fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800130a:	4b6e      	ldr	r3, [pc, #440]	; (80014c4 <allRead+0x68c>)
 800130c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001310:	4b6c      	ldr	r3, [pc, #432]	; (80014c4 <allRead+0x68c>)
 8001312:	edd3 7a02 	vldr	s15, [r3, #8]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131e:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <allRead+0x68c>)
 8001320:	edd3 6a03 	vldr	s13, [r3, #12]
 8001324:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <allRead+0x68c>)
 8001326:	edd3 7a03 	vldr	s15, [r3, #12]
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	4b69      	ldr	r3, [pc, #420]	; (80014d8 <allRead+0x6a0>)
 8001334:	edc3 7a00 	vstr	s15, [r3]

	pitch = -asinf(a32);
 8001338:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <allRead+0x69c>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	f005 fb01 	bl	8006948 <asinf>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	eef1 7a67 	vneg.f32	s15, s15
 800134e:	4b63      	ldr	r3, [pc, #396]	; (80014dc <allRead+0x6a4>)
 8001350:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2f(a31, a33);
 8001354:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <allRead+0x698>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <allRead+0x6a0>)
 800135c:	ed93 7a00 	vldr	s14, [r3]
 8001360:	eef0 0a47 	vmov.f32	s1, s14
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	f005 fb1a 	bl	80069a0 <atan2f>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <allRead+0x6a8>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
	yaw   = atan2f(a12, a22);
 8001376:	4b54      	ldr	r3, [pc, #336]	; (80014c8 <allRead+0x690>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <allRead+0x694>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	eef0 0a47 	vmov.f32	s1, s14
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	f005 fb09 	bl	80069a0 <atan2f>
 800138e:	eef0 7a40 	vmov.f32	s15, s0
 8001392:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <allRead+0x6ac>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
	pitch *= 180.0f / M_PI;
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <allRead+0x6a4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f89f 	bl	80004e0 <__aeabi_f2d>
 80013a2:	a343      	add	r3, pc, #268	; (adr r3, 80014b0 <allRead+0x678>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f8f2 	bl	8000590 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fafe 	bl	80009b4 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a48      	ldr	r2, [pc, #288]	; (80014dc <allRead+0x6a4>)
 80013bc:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / M_PI;
 80013be:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <allRead+0x6ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f88c 	bl	80004e0 <__aeabi_f2d>
 80013c8:	a339      	add	r3, pc, #228	; (adr r3, 80014b0 <allRead+0x678>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff f8df 	bl	8000590 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff faeb 	bl	80009b4 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a40      	ldr	r2, [pc, #256]	; (80014e4 <allRead+0x6ac>)
 80013e2:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <allRead+0x6ac>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80014e8 <allRead+0x6b0>
 80013ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f2:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <allRead+0x6ac>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 80013f8:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <allRead+0x6ac>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d509      	bpl.n	800141c <allRead+0x5e4>
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <allRead+0x6ac>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80014ec <allRead+0x6b4>
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <allRead+0x6ac>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
	roll  *= 180.0f / M_PI;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <allRead+0x6a8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f85d 	bl	80004e0 <__aeabi_f2d>
 8001426:	a322      	add	r3, pc, #136	; (adr r3, 80014b0 <allRead+0x678>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f8b0 	bl	8000590 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fabc 	bl	80009b4 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <allRead+0x6a8>)
 8001440:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <allRead+0x6b8>)
 8001444:	ed93 7a00 	vldr	s14, [r3]
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <allRead+0x698>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <allRead+0x6bc>)
 8001454:	edc3 7a00 	vstr	s15, [r3]
	lin_ay = ay + a32;
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <allRead+0x6c0>)
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <allRead+0x69c>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <allRead+0x6c4>)
 800146a:	edc3 7a00 	vstr	s15, [r3]
	lin_az = az - a33;
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <allRead+0x6c8>)
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <allRead+0x6a0>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <allRead+0x6cc>)
 8001480:	edc3 7a00 	vstr	s15, [r3]

	DataStruct->yaw = yaw;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <allRead+0x6ac>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <allRead+0x6a4>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->roll = roll;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <allRead+0x6a8>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

	sum = 0;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <allRead+0x6d0>)
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	ecbd 8b04 	vpop	{d8-d9}
 80014ae:	bdb0      	pop	{r4, r5, r7, pc}
 80014b0:	1a63c1f8 	.word	0x1a63c1f8
 80014b4:	404ca5dc 	.word	0x404ca5dc
 80014b8:	2000013c 	.word	0x2000013c
 80014bc:	20000138 	.word	0x20000138
 80014c0:	20000140 	.word	0x20000140
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000150 	.word	0x20000150
 80014cc:	20000154 	.word	0x20000154
 80014d0:	20000158 	.word	0x20000158
 80014d4:	2000015c 	.word	0x2000015c
 80014d8:	20000160 	.word	0x20000160
 80014dc:	20000104 	.word	0x20000104
 80014e0:	2000010c 	.word	0x2000010c
 80014e4:	20000108 	.word	0x20000108
 80014e8:	40b0f5c3 	.word	0x40b0f5c3
 80014ec:	43b40000 	.word	0x43b40000
 80014f0:	20000120 	.word	0x20000120
 80014f4:	20000144 	.word	0x20000144
 80014f8:	20000124 	.word	0x20000124
 80014fc:	20000148 	.word	0x20000148
 8001500:	20000128 	.word	0x20000128
 8001504:	2000014c 	.word	0x2000014c
 8001508:	20000114 	.word	0x20000114

0800150c <setMagRes>:

void setMagRes(){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	switch(Mscale){
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <setMagRes+0x2c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <setMagRes+0x12>
 8001518:	2b01      	cmp	r3, #1
 800151a:	d005      	beq.n	8001528 <setMagRes+0x1c>
			magRes = (10.0 * 4912.0) / 8190.0;
			break;
		case MFS_16BITS :
			magRes = (10.0 * 4912.0) / 32768.0;
		}
}
 800151c:	e007      	b.n	800152e <setMagRes+0x22>
			magRes = (10.0 * 4912.0) / 8190.0;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <setMagRes+0x30>)
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <setMagRes+0x34>)
 8001522:	601a      	str	r2, [r3, #0]
			break;
 8001524:	bf00      	nop
}
 8001526:	e002      	b.n	800152e <setMagRes+0x22>
			magRes = (10.0 * 4912.0) / 32768.0;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <setMagRes+0x30>)
 800152a:	4a06      	ldr	r2, [pc, #24]	; (8001544 <setMagRes+0x38>)
 800152c:	601a      	str	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	20000002 	.word	0x20000002
 800153c:	200000ac 	.word	0x200000ac
 8001540:	40bfebff 	.word	0x40bfebff
 8001544:	3fbfe000 	.word	0x3fbfe000

08001548 <setGyroRes>:

void setGyroRes(){
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	switch(Gscale){
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <setGyroRes+0x50>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d81b      	bhi.n	800158c <setGyroRes+0x44>
 8001554:	a201      	add	r2, pc, #4	; (adr r2, 800155c <setGyroRes+0x14>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800156d 	.word	0x0800156d
 8001560:	08001575 	.word	0x08001575
 8001564:	0800157d 	.word	0x0800157d
 8001568:	08001585 	.word	0x08001585
		case GFS_250DPS :
			gyroRes = 250.0/32768.0;
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <setGyroRes+0x54>)
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <setGyroRes+0x58>)
 8001570:	601a      	str	r2, [r3, #0]
			break;
 8001572:	e00b      	b.n	800158c <setGyroRes+0x44>
		case GFS_500DPS :
			gyroRes = 500.0/32768.0;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <setGyroRes+0x54>)
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <setGyroRes+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
			break;
 800157a:	e007      	b.n	800158c <setGyroRes+0x44>
		case GFS_1000DPS :
			gyroRes = 1000.0/32768.0;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <setGyroRes+0x54>)
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <setGyroRes+0x60>)
 8001580:	601a      	str	r2, [r3, #0]
			break;
 8001582:	e003      	b.n	800158c <setGyroRes+0x44>
		case GFS_2000DPS :
			gyroRes = 2000.0/32768.0;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <setGyroRes+0x54>)
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <setGyroRes+0x64>)
 8001588:	601a      	str	r2, [r3, #0]
			break;
 800158a:	bf00      	nop
	}
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000
 800159c:	200000a4 	.word	0x200000a4
 80015a0:	3bfa0000 	.word	0x3bfa0000
 80015a4:	3c7a0000 	.word	0x3c7a0000
 80015a8:	3cfa0000 	.word	0x3cfa0000
 80015ac:	3d7a0000 	.word	0x3d7a0000

080015b0 <setAccelRes>:

void setAccelRes(){
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	switch(Ascale){
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <setAccelRes+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d81f      	bhi.n	80015fc <setAccelRes+0x4c>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <setAccelRes+0x14>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015df 	.word	0x080015df
 80015cc:	080015e9 	.word	0x080015e9
 80015d0:	080015f3 	.word	0x080015f3
		case AFS_2G :
			accelRes = 2.0/32768.0;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <setAccelRes+0x5c>)
 80015d6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80015da:	601a      	str	r2, [r3, #0]
			break;
 80015dc:	e00e      	b.n	80015fc <setAccelRes+0x4c>
		case AFS_4G :
			accelRes = 4.0/32768.0;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <setAccelRes+0x5c>)
 80015e0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80015e4:	601a      	str	r2, [r3, #0]
			break;
 80015e6:	e009      	b.n	80015fc <setAccelRes+0x4c>
		case AFS_8G :
			accelRes = 8.0/32768.0;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <setAccelRes+0x5c>)
 80015ea:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80015ee:	601a      	str	r2, [r3, #0]
			break;
 80015f0:	e004      	b.n	80015fc <setAccelRes+0x4c>
		case AFS_16G :
			accelRes = 16.0/32768.0;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <setAccelRes+0x5c>)
 80015f4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80015f8:	601a      	str	r2, [r3, #0]
			break;
 80015fa:	bf00      	nop
	}
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000001 	.word	0x20000001
 800160c:	200000a8 	.word	0x200000a8

08001610 <readAccel>:

void readAccel(I2C_HandleTypeDef *hi2c, int16_t *Data){
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	uint8_t readAccelBuffer[6];

	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &readAccelBuffer[0], 6, I2C_Timeout);
 800161a:	2332      	movs	r3, #50	; 0x32
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	2306      	movs	r3, #6
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	223b      	movs	r2, #59	; 0x3b
 800162c:	21d0      	movs	r1, #208	; 0xd0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f002 fe46 	bl	80042c0 <HAL_I2C_Mem_Read>
	Data[0] = ((int16_t)readAccelBuffer[0] << 8 | readAccelBuffer[1]);
 8001634:	7a3b      	ldrb	r3, [r7, #8]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7a7b      	ldrb	r3, [r7, #9]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	801a      	strh	r2, [r3, #0]
	Data[1] = ((int16_t)readAccelBuffer[2] << 8 | readAccelBuffer[3]);
 8001646:	7abb      	ldrb	r3, [r7, #10]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b219      	sxth	r1, r3
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	b21a      	sxth	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3302      	adds	r3, #2
 8001654:	430a      	orrs	r2, r1
 8001656:	b212      	sxth	r2, r2
 8001658:	801a      	strh	r2, [r3, #0]
	Data[2] = ((int16_t)readAccelBuffer[4] << 8 | readAccelBuffer[5]);
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b219      	sxth	r1, r3
 8001660:	7b7b      	ldrb	r3, [r7, #13]
 8001662:	b21a      	sxth	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	430a      	orrs	r2, r1
 800166a:	b212      	sxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <readGyro>:

void readGyro(I2C_HandleTypeDef *hi2c, int16_t *Data){
 8001676:	b580      	push	{r7, lr}
 8001678:	b088      	sub	sp, #32
 800167a:	af04      	add	r7, sp, #16
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	uint8_t readGyroBuffer[6];
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, &readGyroBuffer[0], 6, I2C_Timeout);
 8001680:	2332      	movs	r3, #50	; 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2306      	movs	r3, #6
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	2243      	movs	r2, #67	; 0x43
 8001692:	21d0      	movs	r1, #208	; 0xd0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f002 fe13 	bl	80042c0 <HAL_I2C_Mem_Read>
	Data[0] = ((int16_t)readGyroBuffer[0] << 8 | readGyroBuffer[1]);
 800169a:	7a3b      	ldrb	r3, [r7, #8]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21a      	sxth	r2, r3
 80016a0:	7a7b      	ldrb	r3, [r7, #9]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	801a      	strh	r2, [r3, #0]
	Data[1] = ((int16_t)readGyroBuffer[2] << 8 | readGyroBuffer[3]);
 80016ac:	7abb      	ldrb	r3, [r7, #10]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b219      	sxth	r1, r3
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3302      	adds	r3, #2
 80016ba:	430a      	orrs	r2, r1
 80016bc:	b212      	sxth	r2, r2
 80016be:	801a      	strh	r2, [r3, #0]
	Data[2] = ((int16_t)readGyroBuffer[4] << 8 | readGyroBuffer[5]);
 80016c0:	7b3b      	ldrb	r3, [r7, #12]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b219      	sxth	r1, r3
 80016c6:	7b7b      	ldrb	r3, [r7, #13]
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3304      	adds	r3, #4
 80016ce:	430a      	orrs	r2, r1
 80016d0:	b212      	sxth	r2, r2
 80016d2:	801a      	strh	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <readMag>:

void readMag(I2C_HandleTypeDef *hi2c, int16_t *Data){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	uint8_t readStatus;

	//check for data if data is ready
	HAL_I2C_Mem_Read(hi2c, AK8963_ADDRESS, AK8963_ST1, I2C_MEMADD_SIZE_8BIT, &readStatus, 1, I2C_Timeout);
 80016e6:	2332      	movs	r3, #50	; 0x32
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 0316 	add.w	r3, r7, #22
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2202      	movs	r2, #2
 80016f8:	2118      	movs	r1, #24
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f002 fde0 	bl	80042c0 <HAL_I2C_Mem_Read>
	if((readStatus & 0x01) == 0x01){
 8001700:	7dbb      	ldrb	r3, [r7, #22]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d030      	beq.n	800176c <readMag+0x90>
		uint8_t readBuffer[7];
		//read the data of magnetometer and ST2 for overflow data status
		HAL_I2C_Mem_Read(hi2c, AK8963_ADDRESS, AK8963_XOUT_L, I2C_MEMADD_SIZE_8BIT, &readBuffer[0], 7, I2C_Timeout);
 800170a:	2332      	movs	r3, #50	; 0x32
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2307      	movs	r3, #7
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	2118      	movs	r1, #24
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f002 fdce 	bl	80042c0 <HAL_I2C_Mem_Read>

		//check if data is overflow
		uint8_t preCheck = readBuffer[6];
 8001724:	7cbb      	ldrb	r3, [r7, #18]
 8001726:	75fb      	strb	r3, [r7, #23]
		if(!(preCheck & 0x08)){
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11c      	bne.n	800176c <readMag+0x90>
			Data[0] = ((int16_t)readBuffer[1] << 8) | readBuffer[0];
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7b3b      	ldrb	r3, [r7, #12]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21a      	sxth	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	801a      	strh	r2, [r3, #0]
			Data[1] = ((int16_t)readBuffer[3] << 8) | readBuffer[2];
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b219      	sxth	r1, r3
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	b21a      	sxth	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3302      	adds	r3, #2
 8001752:	430a      	orrs	r2, r1
 8001754:	b212      	sxth	r2, r2
 8001756:	801a      	strh	r2, [r3, #0]
			Data[2] = ((int16_t)readBuffer[5] << 8) | readBuffer[4];
 8001758:	7c7b      	ldrb	r3, [r7, #17]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b219      	sxth	r1, r3
 800175e:	7c3b      	ldrb	r3, [r7, #16]
 8001760:	b21a      	sxth	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	3304      	adds	r3, #4
 8001766:	430a      	orrs	r2, r1
 8001768:	b212      	sxth	r2, r2
 800176a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <AK8963_init>:

void AK8963_init(I2C_HandleTypeDef *hi2c, float *data){
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af04      	add	r7, sp, #16
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	uint8_t writeBuffer;
	uint8_t readBuffer[3];

	//Push value from ROM for megnetometer configuration
	//Turn off megnetometer
	writeBuffer = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, AK8963_ADDRESS, AK8963_CNTL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001782:	2332      	movs	r3, #50	; 0x32
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 030f 	add.w	r3, r7, #15
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	220a      	movs	r2, #10
 8001794:	2118      	movs	r1, #24
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f002 fc7e 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f002 f8d7 	bl	8003950 <HAL_Delay>

	//Turn off ROM access mode
	writeBuffer = 0x0F;
 80017a2:	230f      	movs	r3, #15
 80017a4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, AK8963_ADDRESS, AK8963_CNTL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80017a6:	2332      	movs	r3, #50	; 0x32
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	2301      	movs	r3, #1
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	f107 030f 	add.w	r3, r7, #15
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	220a      	movs	r2, #10
 80017b8:	2118      	movs	r1, #24
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f002 fc6c 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 80017c0:	2064      	movs	r0, #100	; 0x64
 80017c2:	f002 f8c5 	bl	8003950 <HAL_Delay>

	//read x, y, z axis calibration value from factory
	HAL_I2C_Mem_Read(hi2c, AK8963_ADDRESS, AK8963_ASAX, I2C_MEMADD_SIZE_8BIT, &readBuffer[0], 3, I2C_Timeout);
 80017c6:	2332      	movs	r3, #50	; 0x32
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2303      	movs	r3, #3
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2301      	movs	r3, #1
 80017d6:	2210      	movs	r2, #16
 80017d8:	2118      	movs	r1, #24
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f002 fd70 	bl	80042c0 <HAL_I2C_Mem_Read>
	//Cal sensitivity adjustment
	data[0] = (float)(readBuffer[0] - 128)/256.0 + 1.0;
 80017e0:	7b3b      	ldrb	r3, [r7, #12]
 80017e2:	3b80      	subs	r3, #128	; 0x80
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ec:	ee17 0a90 	vmov	r0, s15
 80017f0:	f7fe fe76 	bl	80004e0 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <AK8963_init+0x19c>)
 80017fa:	f7fe fff3 	bl	80007e4 <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <AK8963_init+0x1a0>)
 800180c:	f7fe fd0a 	bl	8000224 <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f8cc 	bl	80009b4 <__aeabi_d2f>
 800181c:	4602      	mov	r2, r0
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]
	data[1] = (float)(readBuffer[1] - 128)/256.0 + 1.0;
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	3b80      	subs	r3, #128	; 0x80
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fe55 	bl	80004e0 <__aeabi_f2d>
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <AK8963_init+0x19c>)
 800183c:	f7fe ffd2 	bl	80007e4 <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <AK8963_init+0x1a0>)
 800184e:	f7fe fce9 	bl	8000224 <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	1d1c      	adds	r4, r3, #4
 800185e:	f7ff f8a9 	bl	80009b4 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	6023      	str	r3, [r4, #0]
	data[2] = (float)(readBuffer[2] - 128)/256.0 + 1.0;
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	3b80      	subs	r3, #128	; 0x80
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001872:	ee17 0a90 	vmov	r0, s15
 8001876:	f7fe fe33 	bl	80004e0 <__aeabi_f2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <AK8963_init+0x19c>)
 8001880:	f7fe ffb0 	bl	80007e4 <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <AK8963_init+0x1a0>)
 8001892:	f7fe fcc7 	bl	8000224 <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f103 0408 	add.w	r4, r3, #8
 80018a4:	f7ff f886 	bl	80009b4 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	6023      	str	r3, [r4, #0]

	//Turn off megnetometer for configuration
	writeBuffer = 0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, AK8963_ADDRESS, AK8963_CNTL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80018b0:	2332      	movs	r3, #50	; 0x32
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	2301      	movs	r3, #1
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	f107 030f 	add.w	r3, r7, #15
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2301      	movs	r3, #1
 80018c0:	220a      	movs	r2, #10
 80018c2:	2118      	movs	r1, #24
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f002 fbe7 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 80018ca:	2064      	movs	r0, #100	; 0x64
 80018cc:	f002 f840 	bl	8003950 <HAL_Delay>

	//Config magnetometer to start reading value and set to high resolution
	writeBuffer = Mscale << 4 | Mmode;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <AK8963_init+0x1a4>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <AK8963_init+0x1a8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, AK8963_ADDRESS, AK8963_CNTL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80018e6:	2332      	movs	r3, #50	; 0x32
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2301      	movs	r3, #1
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f107 030f 	add.w	r3, r7, #15
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	220a      	movs	r2, #10
 80018f8:	2118      	movs	r1, #24
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f002 fbcc 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001900:	200a      	movs	r0, #10
 8001902:	f002 f825 	bl	8003950 <HAL_Delay>
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	40700000 	.word	0x40700000
 8001914:	3ff00000 	.word	0x3ff00000
 8001918:	20000002 	.word	0x20000002
 800191c:	20000003 	.word	0x20000003

08001920 <AK8963_Calibrate>:

void AK8963_Calibrate(I2C_HandleTypeDef *hi2c, float *data1, float *data2){
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	uint16_t ii = 0, sample_count = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001932:	2300      	movs	r3, #0
 8001934:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	2300      	movs	r3, #0
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8001950:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <AK8963_Calibrate+0x29c>)
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195a:	6018      	str	r0, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	8019      	strh	r1, [r3, #0]
 8001960:	4a97      	ldr	r2, [pc, #604]	; (8001bc0 <AK8963_Calibrate+0x2a0>)
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196a:	6018      	str	r0, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	8019      	strh	r1, [r3, #0]
 8001970:	2300      	movs	r3, #0
 8001972:	82bb      	strh	r3, [r7, #20]
 8001974:	2300      	movs	r3, #0
 8001976:	82fb      	strh	r3, [r7, #22]
 8001978:	2300      	movs	r3, #0
 800197a:	833b      	strh	r3, [r7, #24]

	// shoot for ~fifteen seconds of mag data
	if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 800197c:	4b91      	ldr	r3, [pc, #580]	; (8001bc4 <AK8963_Calibrate+0x2a4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d102      	bne.n	800198a <AK8963_Calibrate+0x6a>
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 800198a:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <AK8963_Calibrate+0x2a4>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d103      	bne.n	800199a <AK8963_Calibrate+0x7a>
 8001992:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001996:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	for(ii = 0; ii < sample_count; ii++) {
 800199a:	2300      	movs	r3, #0
 800199c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80019a0:	e055      	b.n	8001a4e <AK8963_Calibrate+0x12e>
		readMag(hi2c, mag_temp);  // Read the mag data
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff fe97 	bl	80016dc <readMag>

		for (int jj = 0; jj < 3; jj++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019b2:	e036      	b.n	8001a22 <AK8963_Calibrate+0x102>
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80019b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3350      	adds	r3, #80	; 0x50
 80019ba:	443b      	add	r3, r7
 80019bc:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80019c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	3350      	adds	r3, #80	; 0x50
 80019c6:	443b      	add	r3, r7
 80019c8:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dd0b      	ble.n	80019e8 <AK8963_Calibrate+0xc8>
 80019d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	3350      	adds	r3, #80	; 0x50
 80019d6:	443b      	add	r3, r7
 80019d8:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80019dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	3350      	adds	r3, #80	; 0x50
 80019e2:	443b      	add	r3, r7
 80019e4:	f823 2c2c 	strh.w	r2, [r3, #-44]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80019e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	3350      	adds	r3, #80	; 0x50
 80019ee:	443b      	add	r3, r7
 80019f0:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80019f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	3350      	adds	r3, #80	; 0x50
 80019fa:	443b      	add	r3, r7
 80019fc:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	da0b      	bge.n	8001a1c <AK8963_Calibrate+0xfc>
 8001a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	3350      	adds	r3, #80	; 0x50
 8001a0a:	443b      	add	r3, r7
 8001a0c:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8001a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	3350      	adds	r3, #80	; 0x50
 8001a16:	443b      	add	r3, r7
 8001a18:	f823 2c34 	strh.w	r2, [r3, #-52]
		for (int jj = 0; jj < 3; jj++) {
 8001a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1e:	3301      	adds	r3, #1
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	ddc5      	ble.n	80019b4 <AK8963_Calibrate+0x94>
		}

		if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <AK8963_Calibrate+0x2a4>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d102      	bne.n	8001a36 <AK8963_Calibrate+0x116>
 8001a30:	2087      	movs	r0, #135	; 0x87
 8001a32:	f001 ff8d 	bl	8003950 <HAL_Delay>
		if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <AK8963_Calibrate+0x2a4>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d102      	bne.n	8001a44 <AK8963_Calibrate+0x124>
 8001a3e:	200c      	movs	r0, #12
 8001a40:	f001 ff86 	bl	8003950 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++) {
 8001a44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001a4e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001a52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d3a3      	bcc.n	80019a2 <AK8963_Calibrate+0x82>
	}

	// Get hard iron correction
	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8001a5a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	0fda      	lsrs	r2, r3, #31
 8001a68:	4413      	add	r3, r2
 8001a6a:	105b      	asrs	r3, r3, #1
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8001a6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001a72:	461a      	mov	r2, r3
 8001a74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a78:	4413      	add	r3, r2
 8001a7a:	0fda      	lsrs	r2, r3, #31
 8001a7c:	4413      	add	r3, r2
 8001a7e:	105b      	asrs	r3, r3, #1
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8001a82:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a86:	461a      	mov	r2, r3
 8001a88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	0fda      	lsrs	r2, r3, #31
 8001a90:	4413      	add	r3, r2
 8001a92:	105b      	asrs	r3, r3, #1
 8001a94:	643b      	str	r3, [r7, #64]	; 0x40

	data1[0] = (float) mag_bias[0]*magRes*magCalibration[0];  // save mag biases in G for main program
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <AK8963_Calibrate+0x2a8>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <AK8963_Calibrate+0x2ac>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
	data1[1] = (float) mag_bias[1]*magRes*magCalibration[1];
 8001aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <AK8963_Calibrate+0x2a8>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <AK8963_Calibrate+0x2ac>)
 8001ad0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	edc3 7a00 	vstr	s15, [r3]
	data1[2] = (float) mag_bias[2]*magRes*magCalibration[2];
 8001ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <AK8963_Calibrate+0x2a8>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <AK8963_Calibrate+0x2ac>)
 8001af6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3308      	adds	r3, #8
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	edc3 7a00 	vstr	s15, [r3]

	// Get soft iron correction estimate
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8001b06:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	0fda      	lsrs	r2, r3, #31
 8001b14:	4413      	add	r3, r2
 8001b16:	105b      	asrs	r3, r3, #1
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8001b1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	0fda      	lsrs	r2, r3, #31
 8001b28:	4413      	add	r3, r2
 8001b2a:	105b      	asrs	r3, r3, #1
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
	mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8001b2e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001b32:	461a      	mov	r2, r3
 8001b34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	0fda      	lsrs	r2, r3, #31
 8001b3c:	4413      	add	r3, r2
 8001b3e:	105b      	asrs	r3, r3, #1
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34

	float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8001b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	441a      	add	r2, r3
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	4413      	add	r3, r2
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b54:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	avg_rad /= 3.0;
 8001b58:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001b5c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001b60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	data2[0] = avg_rad/((float)mag_scale[0]);
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b72:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
	data2[1] = avg_rad/((float)mag_scale[1]);
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b96:	edc3 7a00 	vstr	s15, [r3]
	data2[2] = avg_rad/((float)mag_scale[2]);
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
}
 8001bb4:	bf00      	nop
 8001bb6:	3750      	adds	r7, #80	; 0x50
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08006ed0 	.word	0x08006ed0
 8001bc0:	08006ed8 	.word	0x08006ed8
 8001bc4:	20000003 	.word	0x20000003
 8001bc8:	200000ac 	.word	0x200000ac
 8001bcc:	200000f8 	.word	0x200000f8

08001bd0 <MPU9250_init>:

void MPU9250_init(I2C_HandleTypeDef *hi2c){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af04      	add	r7, sp, #16
 8001bd6:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer;
	uint8_t writeBuffer;

	//wake sensor up
	writeBuffer = 0x00;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001bdc:	2332      	movs	r3, #50	; 0x32
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	f107 030e 	add.w	r3, r7, #14
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2301      	movs	r3, #1
 8001bec:	226b      	movs	r2, #107	; 0x6b
 8001bee:	21d0      	movs	r1, #208	; 0xd0
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f002 fa51 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001bf6:	2064      	movs	r0, #100	; 0x64
 8001bf8:	f001 feaa 	bl	8003950 <HAL_Delay>

	//set oscillator to auto select suitable clk source, else use 20MHz internal
	writeBuffer = 0x01;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001c00:	2332      	movs	r3, #50	; 0x32
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2301      	movs	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	f107 030e 	add.w	r3, r7, #14
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	226b      	movs	r2, #107	; 0x6b
 8001c12:	21d0      	movs	r1, #208	; 0xd0
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f002 fa3f 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001c1a:	2064      	movs	r0, #100	; 0x64
 8001c1c:	f001 fe98 	bl	8003950 <HAL_Delay>
		  1      |      1      |      7       |      3600      |    0.17    |    8     |      4000      |    0.04

	Note : Fs is Internal Sampling rate
	*/
	//set Internal Sampling rate to 8 kHz
	writeBuffer = 0x03;
 8001c20:	2303      	movs	r3, #3
 8001c22:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001c24:	2332      	movs	r3, #50	; 0x32
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	f107 030e 	add.w	r3, r7, #14
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	221a      	movs	r2, #26
 8001c36:	21d0      	movs	r1, #208	; 0xd0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f002 fa2d 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001c3e:	2064      	movs	r0, #100	; 0x64
 8001c40:	f001 fe86 	bl	8003950 <HAL_Delay>

	//set Ourput Rate to 1 kHz
	//Note from datasheet Page 12 : Data should be sampled at or above sample rate; SMPLRT_DIV is only used for1kHz internal sampling.
	writeBuffer = 0x04;
 8001c44:	2304      	movs	r3, #4
 8001c46:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001c48:	2332      	movs	r3, #50	; 0x32
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	f107 030e 	add.w	r3, r7, #14
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2301      	movs	r3, #1
 8001c58:	2219      	movs	r2, #25
 8001c5a:	21d0      	movs	r1, #208	; 0xd0
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f002 fa1b 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001c62:	2064      	movs	r0, #100	; 0x64
 8001c64:	f001 fe74 	bl	8003950 <HAL_Delay>

	//set GyroConfig to Gscale *default in this code 250DPS*
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001c68:	2332      	movs	r3, #50	; 0x32
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	f107 030f 	add.w	r3, r7, #15
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2301      	movs	r3, #1
 8001c78:	221b      	movs	r2, #27
 8001c7a:	21d0      	movs	r1, #208	; 0xd0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f002 fb1f 	bl	80042c0 <HAL_I2C_Mem_Read>
	readBuffer = readBuffer & ~0x03; //Clear Fchoise bits[1:0] to 0xX0
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	f023 0303 	bic.w	r3, r3, #3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	73fb      	strb	r3, [r7, #15]
	readBuffer = readBuffer & ~0x18; //Clear GyroScale[4:3] to 0xXX
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	f023 0318 	bic.w	r3, r3, #24
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	73fb      	strb	r3, [r7, #15]
	readBuffer = readBuffer | Gscale << 3; //Set Gyro scale
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <MPU9250_init+0x1bc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	b25a      	sxtb	r2, r3
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(I2C_Delay);
 8001caa:	2064      	movs	r0, #100	; 0x64
 8001cac:	f001 fe50 	bl	8003950 <HAL_Delay>

	writeBuffer = readBuffer;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001cb4:	2332      	movs	r3, #50	; 0x32
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	f107 030e 	add.w	r3, r7, #14
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	221b      	movs	r2, #27
 8001cc6:	21d0      	movs	r1, #208	; 0xd0
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f002 f9e5 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f001 fe3e 	bl	8003950 <HAL_Delay>

	//set AccelConfig to Ascale *default in this code is 2g*
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001cd4:	2332      	movs	r3, #50	; 0x32
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	f107 030f 	add.w	r3, r7, #15
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	221c      	movs	r2, #28
 8001ce6:	21d0      	movs	r1, #208	; 0xd0
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f002 fae9 	bl	80042c0 <HAL_I2C_Mem_Read>
	readBuffer = readBuffer & ~0x18; //Clear AFS bits[4:3]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	f023 0318 	bic.w	r3, r3, #24
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	73fb      	strb	r3, [r7, #15]
	readBuffer = readBuffer | Ascale << 3; //Set Accel scale
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <MPU9250_init+0x1c0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	b25a      	sxtb	r2, r3
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b25b      	sxtb	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	73fb      	strb	r3, [r7, #15]

	writeBuffer = readBuffer;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001d10:	2332      	movs	r3, #50	; 0x32
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2301      	movs	r3, #1
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	f107 030e 	add.w	r3, r7, #14
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	221c      	movs	r2, #28
 8001d22:	21d0      	movs	r1, #208	; 0xd0
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f002 f9b7 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001d2a:	2064      	movs	r0, #100	; 0x64
 8001d2c:	f001 fe10 	bl	8003950 <HAL_Delay>
		   1       |      4     |       20        |   19.80    |           250           |      1
		   1       |      5     |       10        |   35.70    |           250           |      1
		   1       |      6     |       5         |   66.96    |           250           |      1
		   1       |      7     |       460       |    1.94    |           250           |      1
	*/
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, ACCEL_CONFIG_2, I2C_MEMADD_SIZE_8BIT, &readBuffer, 1, I2C_Timeout);
 8001d30:	2332      	movs	r3, #50	; 0x32
 8001d32:	9302      	str	r3, [sp, #8]
 8001d34:	2301      	movs	r3, #1
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	f107 030f 	add.w	r3, r7, #15
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	221d      	movs	r2, #29
 8001d42:	21d0      	movs	r1, #208	; 0xd0
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f002 fabb 	bl	80042c0 <HAL_I2C_Mem_Read>
	readBuffer = readBuffer & ~0x0F; //Clear accel_fchoise_b[3] and A_DLPFG[2:0]
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f023 030f 	bic.w	r3, r3, #15
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	73fb      	strb	r3, [r7, #15]
	readBuffer = readBuffer | 0x03;  //Set accelerometer rate to 1kHz and bandwidth to 41 Hz
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	f043 0303 	orr.w	r3, r3, #3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	73fb      	strb	r3, [r7, #15]

	writeBuffer = readBuffer;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ACCEL_CONFIG_2, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001d62:	2332      	movs	r3, #50	; 0x32
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2301      	movs	r3, #1
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	f107 030e 	add.w	r3, r7, #14
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	221d      	movs	r2, #29
 8001d74:	21d0      	movs	r1, #208	; 0xd0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f002 f98e 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(I2C_Delay);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f001 fde7 	bl	8003950 <HAL_Delay>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000001 	.word	0x20000001

08001d94 <MPU9250_Calibrate>:

void MPU9250_Calibrate(I2C_HandleTypeDef *hi2c, float *data1, float *data2){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09e      	sub	sp, #120	; 0x78
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	uint8_t writeBuffer;

	uint8_t calibData[12]; //array data to hold accel and gyro x, y, z data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0};
 8001da0:	2300      	movs	r3, #0
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da4:	2300      	movs	r3, #0
 8001da6:	643b      	str	r3, [r7, #64]	; 0x40
 8001da8:	2300      	movs	r3, #0
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t accel_bias[3] = {0, 0, 0};
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
 8001db0:	2300      	movs	r3, #0
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
 8001db4:	2300      	movs	r3, #0
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38

	//reset device
	writeBuffer = 0x80;
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001dbe:	2332      	movs	r3, #50	; 0x32
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	226b      	movs	r2, #107	; 0x6b
 8001dd0:	21d0      	movs	r1, #208	; 0xd0
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f002 f960 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001dd8:	2064      	movs	r0, #100	; 0x64
 8001dda:	f001 fdb9 	bl	8003950 <HAL_Delay>

	//get stable time source; Auto select clock source to be PLL gyroscpoe reference if ready
	//else use the internal oscillator, bits[2:0] = 0x01
	writeBuffer = 0x01;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001de4:	2332      	movs	r3, #50	; 0x32
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	2301      	movs	r3, #1
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2301      	movs	r3, #1
 8001df4:	226b      	movs	r2, #107	; 0x6b
 8001df6:	21d0      	movs	r1, #208	; 0xd0
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f002 f94d 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8001e04:	2332      	movs	r3, #50	; 0x32
 8001e06:	9302      	str	r3, [sp, #8]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	226c      	movs	r2, #108	; 0x6c
 8001e16:	21d0      	movs	r1, #208	; 0xd0
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f002 f93d 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8001e1e:	20c8      	movs	r0, #200	; 0xc8
 8001e20:	f001 fd96 	bl	8003950 <HAL_Delay>

	//Configure device for bias calculation
	writeBuffer = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, INT_ENABLE, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout); //Disable all interrupt
 8001e2a:	2332      	movs	r3, #50	; 0x32
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2238      	movs	r2, #56	; 0x38
 8001e3c:	21d0      	movs	r1, #208	; 0xd0
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f002 f92a 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, FIFO_EN, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout); // Disable Fifo
 8001e4a:	2332      	movs	r3, #50	; 0x32
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2223      	movs	r2, #35	; 0x23
 8001e5c:	21d0      	movs	r1, #208	; 0xd0
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f002 f91a 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Turn on internal clock source
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	226b      	movs	r2, #107	; 0x6b
 8001e7c:	21d0      	movs	r1, #208	; 0xd0
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f002 f90a 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, I2C_MST_CTRL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Disable I2C master
 8001e8a:	2332      	movs	r3, #50	; 0x32
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	21d0      	movs	r1, #208	; 0xd0
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f002 f8fa 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Disable FIFO and I2C master modes
 8001eaa:	2332      	movs	r3, #50	; 0x32
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	226a      	movs	r2, #106	; 0x6a
 8001ebc:	21d0      	movs	r1, #208	; 0xd0
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f002 f8ea 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x0C;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Reset FIFO and DMP
 8001eca:	2332      	movs	r3, #50	; 0x32
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	226a      	movs	r2, #106	; 0x6a
 8001edc:	21d0      	movs	r1, #208	; 0xd0
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f002 f8da 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8001ee4:	200f      	movs	r0, #15
 8001ee6:	f001 fd33 	bl	8003950 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeBuffer = 0x01;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Set low-pass filter to 188 Hz
 8001ef0:	2332      	movs	r3, #50	; 0x32
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2301      	movs	r3, #1
 8001f00:	221a      	movs	r2, #26
 8001f02:	21d0      	movs	r1, #208	; 0xd0
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f002 f8c7 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Set sample rate to 1 kHz
 8001f10:	2332      	movs	r3, #50	; 0x32
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	2219      	movs	r2, #25
 8001f22:	21d0      	movs	r1, #208	; 0xd0
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f002 f8b7 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001f30:	2332      	movs	r3, #50	; 0x32
 8001f32:	9302      	str	r3, [sp, #8]
 8001f34:	2301      	movs	r3, #1
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2301      	movs	r3, #1
 8001f40:	221b      	movs	r2, #27
 8001f42:	21d0      	movs	r1, #208	; 0xd0
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f002 f8a7 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8001f50:	2332      	movs	r3, #50	; 0x32
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	221c      	movs	r2, #28
 8001f62:	21d0      	movs	r1, #208	; 0xd0
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f002 f897 	bl	8004098 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8001f6a:	2383      	movs	r3, #131	; 0x83
 8001f6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001f70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeBuffer = 0x40;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, USER_CTRL, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Enable FIFO
 8001f7e:	2332      	movs	r3, #50	; 0x32
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	2301      	movs	r3, #1
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	226a      	movs	r2, #106	; 0x6a
 8001f90:	21d0      	movs	r1, #208	; 0xd0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f002 f880 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = 0x78;
 8001f98:	2378      	movs	r3, #120	; 0x78
 8001f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, FIFO_EN, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8001f9e:	2332      	movs	r3, #50	; 0x32
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2301      	movs	r3, #1
 8001fae:	2223      	movs	r2, #35	; 0x23
 8001fb0:	21d0      	movs	r1, #208	; 0xd0
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f002 f870 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8001fb8:	2028      	movs	r0, #40	; 0x28
 8001fba:	f001 fcc9 	bl	8003950 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeBuffer = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, FIFO_EN, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);// Disable gyro and accelerometer sensors for FIFO
 8001fc4:	2332      	movs	r3, #50	; 0x32
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	2223      	movs	r2, #35	; 0x23
 8001fd6:	21d0      	movs	r1, #208	; 0xd0
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f002 f85d 	bl	8004098 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, FIFO_COUNTH, I2C_MEMADD_SIZE_8BIT, &calibData[0], 2, I2C_Timeout);// read FIFO sample count
 8001fde:	2332      	movs	r3, #50	; 0x32
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	2272      	movs	r2, #114	; 0x72
 8001ff0:	21d0      	movs	r1, #208	; 0xd0
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f002 f964 	bl	80042c0 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8001ff8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 800200e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002012:	4a5a      	ldr	r2, [pc, #360]	; (800217c <MPU9250_Calibrate+0x3e8>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 800201e:	2300      	movs	r3, #0
 8002020:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002024:	e077      	b.n	8002116 <MPU9250_Calibrate+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8002026:	2300      	movs	r3, #0
 8002028:	833b      	strh	r3, [r7, #24]
 800202a:	2300      	movs	r3, #0
 800202c:	837b      	strh	r3, [r7, #26]
 800202e:	2300      	movs	r3, #0
 8002030:	83bb      	strh	r3, [r7, #28]
 8002032:	2300      	movs	r3, #0
 8002034:	823b      	strh	r3, [r7, #16]
 8002036:	2300      	movs	r3, #0
 8002038:	827b      	strh	r3, [r7, #18]
 800203a:	2300      	movs	r3, #0
 800203c:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, FIFO_R_W, 1, &calibData[0], 12, I2C_Timeout);
 800203e:	2332      	movs	r3, #50	; 0x32
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	230c      	movs	r3, #12
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	2274      	movs	r2, #116	; 0x74
 8002050:	21d0      	movs	r1, #208	; 0xd0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f002 f934 	bl	80042c0 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8002058:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 800206c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	b21a      	sxth	r2, r3
 8002074:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21b      	sxth	r3, r3
 800207e:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8002080:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b21a      	sxth	r2, r3
 8002088:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8002094:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	b21a      	sxth	r2, r3
 800209c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 80020a8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 80020bc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 80020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80020d6:	4413      	add	r3, r2
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80020e0:	4413      	add	r3, r2
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80020ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80020f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80020fe:	4413      	add	r3, r2
 8002100:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002104:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002108:	4413      	add	r3, r2
 800210a:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 800210c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002110:	3301      	adds	r3, #1
 8002112:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002116:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800211a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800211e:	429a      	cmp	r2, r3
 8002120:	d381      	bcc.n	8002026 <MPU9250_Calibrate+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8002122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002124:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002128:	fb92 f3f3 	sdiv	r3, r2, r3
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 800212e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002130:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002134:	fb92 f3f3 	sdiv	r3, r2, r3
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 800213a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002140:	fb92 f3f3 	sdiv	r3, r2, r3
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8002146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002148:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800214c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8002152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002154:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002158:	fb92 f3f3 	sdiv	r3, r2, r3
 800215c:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 800215e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002160:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002164:	fb92 f3f3 	sdiv	r3, r2, r3
 8002168:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	2b00      	cmp	r3, #0
 800216e:	dd07      	ble.n	8002180 <MPU9250_Calibrate+0x3ec>
 8002170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002172:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	63bb      	str	r3, [r7, #56]	; 0x38
 800217a:	e006      	b.n	800218a <MPU9250_Calibrate+0x3f6>
 800217c:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002182:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002186:	4413      	add	r3, r2
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800218a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218c:	425b      	negs	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	da00      	bge.n	8002194 <MPU9250_Calibrate+0x400>
 8002192:	3303      	adds	r3, #3
 8002194:	109b      	asrs	r3, r3, #2
 8002196:	121b      	asrs	r3, r3, #8
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a0:	425b      	negs	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da00      	bge.n	80021a8 <MPU9250_Calibrate+0x414>
 80021a6:	3303      	adds	r3, #3
 80021a8:	109b      	asrs	r3, r3, #2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80021b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b2:	425b      	negs	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da00      	bge.n	80021ba <MPU9250_Calibrate+0x426>
 80021b8:	3303      	adds	r3, #3
 80021ba:	109b      	asrs	r3, r3, #2
 80021bc:	121b      	asrs	r3, r3, #8
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 80021c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c6:	425b      	negs	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da00      	bge.n	80021ce <MPU9250_Calibrate+0x43a>
 80021cc:	3303      	adds	r3, #3
 80021ce:	109b      	asrs	r3, r3, #2
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80021d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d8:	425b      	negs	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da00      	bge.n	80021e0 <MPU9250_Calibrate+0x44c>
 80021de:	3303      	adds	r3, #3
 80021e0:	109b      	asrs	r3, r3, #2
 80021e2:	121b      	asrs	r3, r3, #8
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 80021ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ec:	425b      	negs	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da00      	bge.n	80021f4 <MPU9250_Calibrate+0x460>
 80021f2:	3303      	adds	r3, #3
 80021f4:	109b      	asrs	r3, r3, #2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeBuffer = calibData[0];
 80021fc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, XG_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8002204:	2332      	movs	r3, #50	; 0x32
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	2301      	movs	r3, #1
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	2213      	movs	r2, #19
 8002216:	21d0      	movs	r1, #208	; 0xd0
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f001 ff3d 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[1];
 800221e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, XG_OFFSET_L, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8002226:	2332      	movs	r3, #50	; 0x32
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	2214      	movs	r2, #20
 8002238:	21d0      	movs	r1, #208	; 0xd0
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f001 ff2c 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[2];
 8002240:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, YG_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8002248:	2332      	movs	r3, #50	; 0x32
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	2301      	movs	r3, #1
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2301      	movs	r3, #1
 8002258:	2215      	movs	r2, #21
 800225a:	21d0      	movs	r1, #208	; 0xd0
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f001 ff1b 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[3];
 8002262:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, YG_OFFSET_L, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 800226a:	2332      	movs	r3, #50	; 0x32
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	2301      	movs	r3, #1
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2301      	movs	r3, #1
 800227a:	2216      	movs	r2, #22
 800227c:	21d0      	movs	r1, #208	; 0xd0
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f001 ff0a 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[4];
 8002284:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ZG_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 800228c:	2332      	movs	r3, #50	; 0x32
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2301      	movs	r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	2217      	movs	r2, #23
 800229e:	21d0      	movs	r1, #208	; 0xd0
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f001 fef9 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[5];
 80022a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ZG_OFFSET_L, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80022ae:	2332      	movs	r3, #50	; 0x32
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	2218      	movs	r2, #24
 80022c0:	21d0      	movs	r1, #208	; 0xd0
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f001 fee8 	bl	8004098 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	data1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80022c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	edc3 7a00 	vstr	s15, [r3]
	data1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80022e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3304      	adds	r3, #4
 8002302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002306:	edc3 7a00 	vstr	s15, [r3]
	data1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 800230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002314:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3308      	adds	r3, #8
 8002324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002328:	edc3 7a00 	vstr	s15, [r3]

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, XA_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &calibData[0], 2, I2C_Timeout); //Read factory accelerometer trim values
 8002338:	2332      	movs	r3, #50	; 0x32
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	2302      	movs	r3, #2
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	2277      	movs	r2, #119	; 0x77
 800234a:	21d0      	movs	r1, #208	; 0xd0
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f001 ffb7 	bl	80042c0 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8002352:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800235c:	4313      	orrs	r3, r2
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, YA_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &calibData[0], 2, I2C_Timeout);
 8002360:	2332      	movs	r3, #50	; 0x32
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	2302      	movs	r3, #2
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	227a      	movs	r2, #122	; 0x7a
 8002372:	21d0      	movs	r1, #208	; 0xd0
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f001 ffa3 	bl	80042c0 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800237a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002384:	4313      	orrs	r3, r2
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(hi2c, mpu9250_AD0_low, ZA_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &calibData[0], 2, I2C_Timeout);
 8002388:	2332      	movs	r3, #50	; 0x32
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2302      	movs	r3, #2
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2301      	movs	r3, #1
 8002398:	227c      	movs	r2, #124	; 0x7c
 800239a:	21d0      	movs	r1, #208	; 0xd0
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f001 ff8f 	bl	80042c0 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80023a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80023ac:	4313      	orrs	r3, r2
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 80023b0:	2301      	movs	r3, #1
 80023b2:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 80023b4:	4a89      	ldr	r2, [pc, #548]	; (80025dc <MPU9250_Calibrate+0x848>)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4611      	mov	r1, r2
 80023be:	8019      	strh	r1, [r3, #0]
 80023c0:	3302      	adds	r3, #2
 80023c2:	0c12      	lsrs	r2, r2, #16
 80023c4:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80023cc:	e017      	b.n	80023fe <MPU9250_Calibrate+0x66a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 80023ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	3368      	adds	r3, #104	; 0x68
 80023d6:	443b      	add	r3, r7
 80023d8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80023dc:	461a      	mov	r2, r3
 80023de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <MPU9250_Calibrate+0x660>
 80023e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80023ea:	3368      	adds	r3, #104	; 0x68
 80023ec:	443b      	add	r3, r7
 80023ee:	2201      	movs	r2, #1
 80023f0:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 80023f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80023f8:	3301      	adds	r3, #1
 80023fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80023fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002402:	2b02      	cmp	r3, #2
 8002404:	d9e3      	bls.n	80023ce <MPU9250_Calibrate+0x63a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	2b00      	cmp	r3, #0
 800240c:	da00      	bge.n	8002410 <MPU9250_Calibrate+0x67c>
 800240e:	3307      	adds	r3, #7
 8002410:	10db      	asrs	r3, r3, #3
 8002412:	425b      	negs	r3, r3
 8002414:	4413      	add	r3, r2
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8002418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	2b00      	cmp	r3, #0
 800241e:	da00      	bge.n	8002422 <MPU9250_Calibrate+0x68e>
 8002420:	3307      	adds	r3, #7
 8002422:	10db      	asrs	r3, r3, #3
 8002424:	425b      	negs	r3, r3
 8002426:	4413      	add	r3, r2
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 800242a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	2b00      	cmp	r3, #0
 8002430:	da00      	bge.n	8002434 <MPU9250_Calibrate+0x6a0>
 8002432:	3307      	adds	r3, #7
 8002434:	10db      	asrs	r3, r3, #3
 8002436:	425b      	negs	r3, r3
 8002438:	4413      	add	r3, r2
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	121b      	asrs	r3, r3, #8
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800244e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002452:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002456:	4313      	orrs	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	121b      	asrs	r3, r3, #8
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002470:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002474:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002478:	4313      	orrs	r3, r2
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	121b      	asrs	r3, r3, #8
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002492:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002496:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800249a:	4313      	orrs	r3, r2
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeBuffer = calibData[0];
 80024a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80024a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, XA_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80024aa:	2332      	movs	r3, #50	; 0x32
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	2301      	movs	r3, #1
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2301      	movs	r3, #1
 80024ba:	2277      	movs	r2, #119	; 0x77
 80024bc:	21d0      	movs	r1, #208	; 0xd0
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f001 fdea 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[1];
 80024c4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80024c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, XA_OFFSET_L, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80024cc:	2332      	movs	r3, #50	; 0x32
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	2301      	movs	r3, #1
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	2278      	movs	r2, #120	; 0x78
 80024de:	21d0      	movs	r1, #208	; 0xd0
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f001 fdd9 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[2];
 80024e6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80024ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, YA_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 80024ee:	2332      	movs	r3, #50	; 0x32
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	2301      	movs	r3, #1
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2301      	movs	r3, #1
 80024fe:	227a      	movs	r2, #122	; 0x7a
 8002500:	21d0      	movs	r1, #208	; 0xd0
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f001 fdc8 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[3];
 8002508:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800250c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, YA_OFFSET_L, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8002510:	2332      	movs	r3, #50	; 0x32
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	2301      	movs	r3, #1
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	227b      	movs	r2, #123	; 0x7b
 8002522:	21d0      	movs	r1, #208	; 0xd0
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f001 fdb7 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[4];
 800252a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800252e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ZA_OFFSET_H, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8002532:	2332      	movs	r3, #50	; 0x32
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	2301      	movs	r3, #1
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	227c      	movs	r2, #124	; 0x7c
 8002544:	21d0      	movs	r1, #208	; 0xd0
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f001 fda6 	bl	8004098 <HAL_I2C_Mem_Write>
	writeBuffer = calibData[5];
 800254c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(hi2c, mpu9250_AD0_low, ZA_OFFSET_L, I2C_MEMADD_SIZE_8BIT, &writeBuffer, 1, I2C_Timeout);
 8002554:	2332      	movs	r3, #50	; 0x32
 8002556:	9302      	str	r3, [sp, #8]
 8002558:	2301      	movs	r3, #1
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2301      	movs	r3, #1
 8002564:	227e      	movs	r2, #126	; 0x7e
 8002566:	21d0      	movs	r1, #208	; 0xd0
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f001 fd95 	bl	8004098 <HAL_I2C_Mem_Write>

	//Output scaled accel biases for display in the main program
	data2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	ee07 3a90 	vmov	s15, r3
 8002574:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002578:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	edc3 7a00 	vstr	s15, [r3]
	data2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002598:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ac:	edc3 7a00 	vstr	s15, [r3]
	data2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3308      	adds	r3, #8
 80025ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ce:	edc3 7a00 	vstr	s15, [r3]

}
 80025d2:	bf00      	nop
 80025d4:	3768      	adds	r7, #104	; 0x68
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	08006ee0 	.word	0x08006ee0

080025e0 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0b2      	sub	sp, #200	; 0xc8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80025ea:	edc7 0a08 	vstr	s1, [r7, #32]
 80025ee:	ed87 1a07 	vstr	s2, [r7, #28]
 80025f2:	edc7 1a06 	vstr	s3, [r7, #24]
 80025f6:	ed87 2a05 	vstr	s4, [r7, #20]
 80025fa:	edc7 2a04 	vstr	s5, [r7, #16]
 80025fe:	ed87 3a03 	vstr	s6, [r7, #12]
 8002602:	edc7 3a02 	vstr	s7, [r7, #8]
 8002606:	ed87 4a01 	vstr	s8, [r7, #4]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 800260a:	4b70      	ldr	r3, [pc, #448]	; (80027cc <QuaternionUpdate+0x1ec>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <QuaternionUpdate+0x1ec>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800261a:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <QuaternionUpdate+0x1ec>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002622:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <QuaternionUpdate+0x1ec>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 800262a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800262e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002632:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    float _2q2 = 2.0f * q2;
 8002636:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800263a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    float _2q3 = 2.0f * q3;
 8002642:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002646:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float _2q4 = 2.0f * q4;
 800264e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002656:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    float _2q1q3 = 2.0f * q1 * q3;
 800265a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800265e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002662:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float _2q3q4 = 2.0f * q3 * q4;
 800266e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002672:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002676:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    float q1q1 = q1 * q1;
 8002682:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002686:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800268a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float q1q2 = q1 * q2;
 800268e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002692:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float q1q3 = q1 * q3;
 800269e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80026a2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q1q4 = q1 * q4;
 80026ae:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80026b2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q2q2 = q2 * q2;
 80026be:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80026c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026c6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q2q3 = q2 * q3;
 80026ca:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80026ce:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q2q4 = q2 * q4;
 80026da:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80026de:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q3q3 = q3 * q3;
 80026ea:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80026ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026f2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q3q4 = q3 * q4;
 80026f6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80026fa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q4q4 = q4 * q4;
 8002706:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800270a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800270e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8002712:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002716:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800271a:	edd7 7a08 	vldr	s15, [r7, #32]
 800271e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002726:	edd7 7a07 	vldr	s15, [r7, #28]
 800272a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	f004 f935 	bl	80069a4 <sqrtf>
 800273a:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 800273e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002742:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	f000 85b2 	beq.w	80032b2 <QuaternionUpdate+0xcd2>
    norm = 1.0f/norm;
 800274e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002752:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    ax *= norm;
 800275e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002762:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= norm;
 800276e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002772:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= norm;
 800277e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002782:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 800278e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002792:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002796:	edd7 7a02 	vldr	s15, [r7, #8]
 800279a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800279e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	f004 f8f7 	bl	80069a4 <sqrtf>
 80027b6:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 80027ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	f000 8576 	beq.w	80032b6 <QuaternionUpdate+0xcd6>
 80027ca:	e001      	b.n	80027d0 <QuaternionUpdate+0x1f0>
 80027cc:	20000008 	.word	0x20000008
    norm = 1.0f/norm;
 80027d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80027d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027dc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    mx *= norm;
 80027e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80027e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	edc7 7a03 	vstr	s15, [r7, #12]
    my *= norm;
 80027f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80027f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	edc7 7a02 	vstr	s15, [r7, #8]
    mz *= norm;
 8002800:	ed97 7a01 	vldr	s14, [r7, #4]
 8002804:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280c:	edc7 7a01 	vstr	s15, [r7, #4]

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8002810:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002814:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002818:	ed97 7a03 	vldr	s14, [r7, #12]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1my = 2.0f * q1 * my;
 8002824:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800282c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002834:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q1mz = 2.0f * q1 * mz;
 8002838:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800283c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002840:	ed97 7a01 	vldr	s14, [r7, #4]
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q2mx = 2.0f * q2 * mx;
 800284c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002850:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002854:	ed97 7a03 	vldr	s14, [r7, #12]
 8002858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8002860:	ed97 7a03 	vldr	s14, [r7, #12]
 8002864:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002870:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800287c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002880:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002890:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80028a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028a8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80028ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b4:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80028b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028c0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028cc:	edd7 6a03 	vldr	s13, [r7, #12]
 80028d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028dc:	edd7 6a03 	vldr	s13, [r7, #12]
 80028e0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80028f0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80028f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80028f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8002900:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002910:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800291c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002920:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800292c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002930:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800293c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002940:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002950:	edd7 7a01 	vldr	s15, [r7, #4]
 8002954:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002958:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800295c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002964:	edd7 6a02 	vldr	s13, [r7, #8]
 8002968:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800296c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2bx = sqrtf(hx * hx + hy * hy);
 8002978:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800297c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002980:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002984:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	eeb0 0a67 	vmov.f32	s0, s15
 8002990:	f004 f808 	bl	80069a4 <sqrtf>
 8002994:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8002998:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800299c:	eeb1 7a67 	vneg.f32	s14, s15
 80029a0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80029a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80029ac:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b8:	edd7 6a01 	vldr	s13, [r7, #4]
 80029bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80029cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80029d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d8:	edd7 6a01 	vldr	s13, [r7, #4]
 80029dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029e8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80029ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80029f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a00:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a04:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a10:	edd7 6a01 	vldr	s13, [r7, #4]
 8002a14:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4bx = 2.0f * _2bx;
 8002a24:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a2c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4bz = 2.0f * _2bz;
 8002a30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a38:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002a3c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002a40:	eeb1 7a67 	vneg.f32	s14, s15
 8002a44:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002a48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002a50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a60:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002a64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a68:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002a6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a70:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a78:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002a88:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002a8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a90:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a94:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a9c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002aa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002aac:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002ab0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ab4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ab8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ad8:	eef1 6a67 	vneg.f32	s13, s15
 8002adc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae4:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002ae8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002aec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002af0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002af4:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002af8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002afc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002b00:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b08:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002b0c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b10:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002b14:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002b34:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002b38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b3c:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002b40:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b48:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002b4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b50:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002b54:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b5c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b60:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b74:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002b84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002b88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b8c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b9c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ba8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bb0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002bb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bbc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002bcc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002bd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002bd4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002bd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bdc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002be0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002be4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002be8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bec:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bf4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c00:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002c04:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002c10:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c18:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002c1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c20:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c24:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c28:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002c2c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c30:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002c34:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c50:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002c54:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c5c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002c60:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c6c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002c70:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c74:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c78:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c80:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002c84:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002c88:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002c8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002c90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c94:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002cac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002cb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cb4:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002cb8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002cbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002cc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cc4:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002cc8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002ccc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002cd0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002cd4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cd8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002cdc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ce0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ce4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ce8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002cec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002cf0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002cf4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cfc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002d0c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002d10:	eeb1 7a67 	vneg.f32	s14, s15
 8002d14:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002d18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d1c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d30:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002d34:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d38:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d40:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d48:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d54:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d58:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002d5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d60:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d6c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d70:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002d74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d78:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002d7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d80:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d8c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d90:	eef1 6a67 	vneg.f32	s13, s15
 8002d94:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002d98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d9c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002da0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002da4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002da8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002dac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002db0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002db4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002db8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002dbc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002dc0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002dc4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dc8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002dcc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002dd0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002dd4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002dd8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ddc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002df4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002df8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dfc:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002e00:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e0c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002e10:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002e18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e20:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002e24:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e28:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002e2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e48:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002e4c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002e50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e54:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8002e58:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002e5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e64:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002e68:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e70:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e78:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002e7c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002e80:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e84:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002e88:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002e8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e94:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002eac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002eb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002eb4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ebc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ec4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ecc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ed0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ed4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ed8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002edc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ee0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ee4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ef4:	eef1 6a67 	vneg.f32	s13, s15
 8002ef8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f00:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002f04:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002f14:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f1c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f24:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f2c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8002f30:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f34:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002f38:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002f40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f58:	eef1 6a67 	vneg.f32	s13, s15
 8002f5c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002f60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f64:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8002f68:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002f6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002f74:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002f78:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f80:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002f84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f88:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002f8c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f90:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002f94:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f98:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002f9c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002fb4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fb8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fbc:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8002fc0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002fc4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002fc8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fcc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fd0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002fd4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fd8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002fdc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fe0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002fe4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002fe8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002fec:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8003004:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003008:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800300c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003010:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003018:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800301c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003028:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	f003 fcb6 	bl	80069a4 <sqrtf>
 8003038:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 800303c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003040:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003048:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    s1 *= norm;
 800304c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003050:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003058:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 *= norm;
 800305c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003060:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003068:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 *= norm;
 800306c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003070:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003078:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 *= norm;
 800307c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003080:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003088:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800308c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003090:	eeb1 7a67 	vneg.f32	s14, s15
 8003094:	edd7 7a06 	vldr	s15, [r7, #24]
 8003098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800309c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80030a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ac:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80030b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <QuaternionUpdate+0xce0>)
 80030c6:	edd3 6a00 	vldr	s13, [r3]
 80030ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80030ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80030da:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80030de:	edd7 7a06 	vldr	s15, [r7, #24]
 80030e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e6:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80030ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f6:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80030fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800310a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <QuaternionUpdate+0xce0>)
 8003110:	edd3 6a00 	vldr	s13, [r3]
 8003114:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003120:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8003124:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003128:	edd7 7a05 	vldr	s15, [r7, #20]
 800312c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003130:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8003134:	edd7 7a04 	vldr	s15, [r7, #16]
 8003138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003140:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8003144:	edd7 7a06 	vldr	s15, [r7, #24]
 8003148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003150:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <QuaternionUpdate+0xce0>)
 800315a:	edd3 6a00 	vldr	s13, [r3]
 800315e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800316e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003172:	edd7 7a04 	vldr	s15, [r7, #16]
 8003176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317a:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800317e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318a:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800318e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800319e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <QuaternionUpdate+0xce0>)
 80031a4:	edd3 6a00 	vldr	s13, [r3]
 80031a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80031ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Integrate to yield quaternion
    q1 += qDot1 * deltaT;
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <QuaternionUpdate+0xce4>)
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80031ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ce:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    q2 += qDot2 * deltaT;
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <QuaternionUpdate+0xce4>)
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e0:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80031e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e8:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    q3 += qDot3 * deltaT;
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <QuaternionUpdate+0xce4>)
 80031ee:	ed93 7a00 	vldr	s14, [r3]
 80031f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    q4 += qDot4 * deltaT;
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <QuaternionUpdate+0xce4>)
 8003208:	ed93 7a00 	vldr	s14, [r3]
 800320c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8003220:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003224:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003228:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800322c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003234:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003238:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800323c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003240:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003244:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	f003 fba8 	bl	80069a4 <sqrtf>
 8003254:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8003258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800325c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003264:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q[0] = q1 * norm;
 8003268:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800326c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <QuaternionUpdate+0xce8>)
 8003276:	edc3 7a00 	vstr	s15, [r3]
    q[1] = q2 * norm;
 800327a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800327e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <QuaternionUpdate+0xce8>)
 8003288:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] = q3 * norm;
 800328c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8003290:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <QuaternionUpdate+0xce8>)
 800329a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] = q4 * norm;
 800329e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80032a2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <QuaternionUpdate+0xce8>)
 80032ac:	edc3 7a03 	vstr	s15, [r3, #12]
 80032b0:	e002      	b.n	80032b8 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 80032b6:	bf00      	nop

}
 80032b8:	37c8      	adds	r7, #200	; 0xc8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000004 	.word	0x20000004
 80032c4:	20000110 	.word	0x20000110
 80032c8:	20000008 	.word	0x20000008

080032cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032d0:	f000 facd 	bl	800386e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032d4:	f000 f822 	bl	800331c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032d8:	f000 f8f6 	bl	80034c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80032dc:	f000 f8aa 	bl	8003434 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80032e0:	f000 f868 	bl	80033b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  GY6500_init(&hi2c1);
 80032e4:	480a      	ldr	r0, [pc, #40]	; (8003310 <main+0x44>)
 80032e6:	f7fd fd37 	bl	8000d58 <GY6500_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 80032ea:	f000 fb25 	bl	8003938 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <main+0x48>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3f8      	bcc.n	80032ea <main+0x1e>
		timestamp = HAL_GetTick() + 1;
 80032f8:	f000 fb1e 	bl	8003938 <HAL_GetTick>
 80032fc:	4603      	mov	r3, r0
 80032fe:	3301      	adds	r3, #1
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <main+0x48>)
 8003302:	6013      	str	r3, [r2, #0]

		allRead(&hi2c1, &mpu9250);
 8003304:	4904      	ldr	r1, [pc, #16]	; (8003318 <main+0x4c>)
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <main+0x44>)
 8003308:	f7fd fd96 	bl	8000e38 <allRead>
  {
 800330c:	e7ed      	b.n	80032ea <main+0x1e>
 800330e:	bf00      	nop
 8003310:	20000164 	.word	0x20000164
 8003314:	2000027c 	.word	0x2000027c
 8003318:	2000024c 	.word	0x2000024c

0800331c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b094      	sub	sp, #80	; 0x50
 8003320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003322:	f107 0318 	add.w	r3, r7, #24
 8003326:	2238      	movs	r2, #56	; 0x38
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fb04 	bl	8006938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800333e:	2000      	movs	r0, #0
 8003340:	f001 fc32 	bl	8004ba8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003344:	2302      	movs	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800334e:	2340      	movs	r3, #64	; 0x40
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003352:	2302      	movs	r3, #2
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003356:	2302      	movs	r3, #2
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800335a:	2304      	movs	r3, #4
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800335e:	2355      	movs	r3, #85	; 0x55
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003362:	2302      	movs	r3, #2
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003366:	2302      	movs	r3, #2
 8003368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800336a:	2302      	movs	r3, #2
 800336c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	4618      	mov	r0, r3
 8003374:	f001 fccc 	bl	8004d10 <HAL_RCC_OscConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800337e:	f000 f911 	bl	80035a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003382:	230f      	movs	r3, #15
 8003384:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003386:	2303      	movs	r3, #3
 8003388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	2104      	movs	r1, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f001 ffca 	bl	8005334 <HAL_RCC_ClockConfig>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80033a6:	f000 f8fd 	bl	80035a4 <Error_Handler>
  }
}
 80033aa:	bf00      	nop
 80033ac:	3750      	adds	r7, #80	; 0x50
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <MX_I2C1_Init+0x74>)
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <MX_I2C1_Init+0x78>)
 80033bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <MX_I2C1_Init+0x74>)
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <MX_I2C1_Init+0x7c>)
 80033c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <MX_I2C1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ca:	4b17      	ldr	r3, [pc, #92]	; (8003428 <MX_I2C1_Init+0x74>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <MX_I2C1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <MX_I2C1_Init+0x74>)
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <MX_I2C1_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_I2C1_Init+0x74>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <MX_I2C1_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ee:	480e      	ldr	r0, [pc, #56]	; (8003428 <MX_I2C1_Init+0x74>)
 80033f0:	f000 fdb7 	bl	8003f62 <HAL_I2C_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033fa:	f000 f8d3 	bl	80035a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033fe:	2100      	movs	r1, #0
 8003400:	4809      	ldr	r0, [pc, #36]	; (8003428 <MX_I2C1_Init+0x74>)
 8003402:	f001 fb39 	bl	8004a78 <HAL_I2CEx_ConfigAnalogFilter>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800340c:	f000 f8ca 	bl	80035a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003410:	2100      	movs	r1, #0
 8003412:	4805      	ldr	r0, [pc, #20]	; (8003428 <MX_I2C1_Init+0x74>)
 8003414:	f001 fb7b 	bl	8004b0e <HAL_I2CEx_ConfigDigitalFilter>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800341e:	f000 f8c1 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000164 	.word	0x20000164
 800342c:	40005400 	.word	0x40005400
 8003430:	10802d9b 	.word	0x10802d9b

08003434 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003438:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <MX_LPUART1_UART_Init+0x90>)
 800343c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003444:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 800345a:	220c      	movs	r2, #12
 800345c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003466:	2200      	movs	r2, #0
 8003468:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 800346c:	2200      	movs	r2, #0
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003476:	4812      	ldr	r0, [pc, #72]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 8003478:	f002 fbc6 	bl	8005c08 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8003482:	f000 f88f 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003486:	2100      	movs	r1, #0
 8003488:	480d      	ldr	r0, [pc, #52]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 800348a:	f003 f961 	bl	8006750 <HAL_UARTEx_SetTxFifoThreshold>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003494:	f000 f886 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003498:	2100      	movs	r1, #0
 800349a:	4809      	ldr	r0, [pc, #36]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 800349c:	f003 f996 	bl	80067cc <HAL_UARTEx_SetRxFifoThreshold>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80034a6:	f000 f87d 	bl	80035a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80034aa:	4805      	ldr	r0, [pc, #20]	; (80034c0 <MX_LPUART1_UART_Init+0x8c>)
 80034ac:	f003 f917 	bl	80066de <HAL_UARTEx_DisableFifoMode>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80034b6:	f000 f875 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200001b8 	.word	0x200001b8
 80034c4:	40008000 	.word	0x40008000

080034c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034de:	4b2f      	ldr	r3, [pc, #188]	; (800359c <MX_GPIO_Init+0xd4>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a2e      	ldr	r2, [pc, #184]	; (800359c <MX_GPIO_Init+0xd4>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ea:	4b2c      	ldr	r3, [pc, #176]	; (800359c <MX_GPIO_Init+0xd4>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <MX_GPIO_Init+0xd4>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <MX_GPIO_Init+0xd4>)
 80034fc:	f043 0320 	orr.w	r3, r3, #32
 8003500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <MX_GPIO_Init+0xd4>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <MX_GPIO_Init+0xd4>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	4a22      	ldr	r2, [pc, #136]	; (800359c <MX_GPIO_Init+0xd4>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <MX_GPIO_Init+0xd4>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <MX_GPIO_Init+0xd4>)
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <MX_GPIO_Init+0xd4>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <MX_GPIO_Init+0xd4>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800353e:	2200      	movs	r2, #0
 8003540:	2120      	movs	r1, #32
 8003542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003546:	f000 fcb7 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800354a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800354e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003550:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	480f      	ldr	r0, [pc, #60]	; (80035a0 <MX_GPIO_Init+0xd8>)
 8003562:	f000 fb27 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003566:	2320      	movs	r3, #32
 8003568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003580:	f000 fb18 	bl	8003bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	2028      	movs	r0, #40	; 0x28
 800358a:	f000 fade 	bl	8003b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800358e:	2028      	movs	r0, #40	; 0x28
 8003590:	f000 faf5 	bl	8003b7e <HAL_NVIC_EnableIRQ>

}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	48000800 	.word	0x48000800

080035a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a8:	b672      	cpsid	i
}
 80035aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035ac:	e7fe      	b.n	80035ac <Error_Handler+0x8>
	...

080035b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_MspInit+0x44>)
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_MspInit+0x44>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6613      	str	r3, [r2, #96]	; 0x60
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_MspInit+0x44>)
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_MspInit+0x44>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_MspInit+0x44>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	; 0x58
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_MspInit+0x44>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035e6:	f001 fb83 	bl	8004cf0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0a0      	sub	sp, #128	; 0x80
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	2254      	movs	r2, #84	; 0x54
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f003 f98d 	bl	8006938 <memset>
  if(hi2c->Instance==I2C1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <HAL_I2C_MspInit+0xe0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d153      	bne.n	80036d0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003628:	2340      	movs	r3, #64	; 0x40
 800362a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800362c:	2300      	movs	r3, #0
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003630:	f107 0318 	add.w	r3, r7, #24
 8003634:	4618      	mov	r0, r3
 8003636:	f002 f899 	bl	800576c <HAL_RCCEx_PeriphCLKConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003640:	f7ff ffb0 	bl	80035a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003650:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003668:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003678:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800367a:	2312      	movs	r3, #18
 800367c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003686:	2304      	movs	r3, #4
 8003688:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800368e:	4619      	mov	r1, r3
 8003690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003694:	f000 fa8e 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800369c:	2312      	movs	r3, #18
 800369e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036a8:	2304      	movs	r3, #4
 80036aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80036b0:	4619      	mov	r1, r3
 80036b2:	480b      	ldr	r0, [pc, #44]	; (80036e0 <HAL_I2C_MspInit+0xe8>)
 80036b4:	f000 fa7e 	bl	8003bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	4a07      	ldr	r2, [pc, #28]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 80036be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036c2:	6593      	str	r3, [r2, #88]	; 0x58
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_I2C_MspInit+0xe4>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036d0:	bf00      	nop
 80036d2:	3780      	adds	r7, #128	; 0x80
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40005400 	.word	0x40005400
 80036dc:	40021000 	.word	0x40021000
 80036e0:	48000400 	.word	0x48000400

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b09e      	sub	sp, #120	; 0x78
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036fc:	f107 0310 	add.w	r3, r7, #16
 8003700:	2254      	movs	r2, #84	; 0x54
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f003 f917 	bl	8006938 <memset>
  if(huart->Instance==LPUART1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1f      	ldr	r2, [pc, #124]	; (800378c <HAL_UART_MspInit+0xa8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d136      	bne.n	8003782 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003714:	2320      	movs	r3, #32
 8003716:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003718:	2300      	movs	r3, #0
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	4618      	mov	r0, r3
 8003722:	f002 f823 	bl	800576c <HAL_RCCEx_PeriphCLKConfig>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800372c:	f7ff ff3a 	bl	80035a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003730:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_UART_MspInit+0xac>)
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <HAL_UART_MspInit+0xac>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_UART_MspInit+0xac>)
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_UART_MspInit+0xac>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_UART_MspInit+0xac>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_UART_MspInit+0xac>)
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003760:	230c      	movs	r3, #12
 8003762:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003770:	230c      	movs	r3, #12
 8003772:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003774:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003778:	4619      	mov	r1, r3
 800377a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800377e:	f000 fa19 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003782:	bf00      	nop
 8003784:	3778      	adds	r7, #120	; 0x78
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40008000 	.word	0x40008000
 8003790:	40021000 	.word	0x40021000

08003794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <NMI_Handler+0x4>

0800379a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <HardFault_Handler+0x4>

080037a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <MemManage_Handler+0x4>

080037a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037aa:	e7fe      	b.n	80037aa <BusFault_Handler+0x4>

080037ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <UsageFault_Handler+0x4>

080037b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e0:	f000 f898 	bl	8003914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80037ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037f0:	f000 fb94 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <SystemInit+0x20>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <SystemInit+0x20>)
 8003804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800381e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003820:	f7ff ffea 	bl	80037f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <LoopForever+0x6>)
  ldr r1, =_edata
 8003826:	490d      	ldr	r1, [pc, #52]	; (800385c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <LoopForever+0xe>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <LoopForever+0x16>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384a:	f003 f851 	bl	80068f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800384e:	f7ff fd3d 	bl	80032cc <main>

08003852 <LoopForever>:

LoopForever:
    b LoopForever
 8003852:	e7fe      	b.n	8003852 <LoopForever>
  ldr   r0, =_estack
 8003854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003860:	08006f70 	.word	0x08006f70
  ldr r2, =_sbss
 8003864:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003868:	20000284 	.word	0x20000284

0800386c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC1_2_IRQHandler>

0800386e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003878:	2003      	movs	r0, #3
 800387a:	f000 f95b 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387e:	2000      	movs	r0, #0
 8003880:	f000 f80e 	bl	80038a0 <HAL_InitTick>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	71fb      	strb	r3, [r7, #7]
 800388e:	e001      	b.n	8003894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003890:	f7ff fe8e 	bl	80035b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003894:	79fb      	ldrb	r3, [r7, #7]

}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_InitTick+0x68>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d022      	beq.n	80038fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_InitTick+0x6c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_InitTick+0x68>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f966 	bl	8003b9a <HAL_SYSTICK_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10f      	bne.n	80038f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d809      	bhi.n	80038ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038da:	2200      	movs	r2, #0
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	f000 f932 	bl	8003b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_InitTick+0x70>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e007      	b.n	80038fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e004      	b.n	80038fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e001      	b.n	80038fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000020 	.word	0x20000020
 800390c:	20000018 	.word	0x20000018
 8003910:	2000001c 	.word	0x2000001c

08003914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_IncTick+0x1c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_IncTick+0x20>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4413      	add	r3, r2
 8003922:	4a03      	ldr	r2, [pc, #12]	; (8003930 <HAL_IncTick+0x1c>)
 8003924:	6013      	str	r3, [r2, #0]
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	20000280 	.word	0x20000280
 8003934:	20000020 	.word	0x20000020

08003938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return uwTick;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_GetTick+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000280 	.word	0x20000280

08003950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7ff ffee 	bl	8003938 <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d004      	beq.n	8003974 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_Delay+0x40>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003974:	bf00      	nop
 8003976:	f7ff ffdf 	bl	8003938 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	429a      	cmp	r2, r3
 8003984:	d8f7      	bhi.n	8003976 <HAL_Delay+0x26>
  {
  }
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000020 	.word	0x20000020

08003994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c6:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <__NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4907      	ldr	r1, [pc, #28]	; (8003a30 <__NVIC_EnableIRQ+0x38>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e100 	.word	0xe000e100

08003a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	; (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f1c3 0307 	rsb	r3, r3, #7
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	bf28      	it	cs
 8003aa6:	2304      	movcs	r3, #4
 8003aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d902      	bls.n	8003ab8 <NVIC_EncodePriority+0x30>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	e000      	b.n	8003aba <NVIC_EncodePriority+0x32>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	401a      	ands	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	4313      	orrs	r3, r2
         );
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b00:	d301      	bcc.n	8003b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00f      	b.n	8003b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <SysTick_Config+0x40>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0e:	210f      	movs	r1, #15
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	f7ff ff8e 	bl	8003a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <SysTick_Config+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <SysTick_Config+0x40>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	e000e010 	.word	0xe000e010

08003b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff29 	bl	8003994 <__NVIC_SetPriorityGrouping>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b58:	f7ff ff40 	bl	80039dc <__NVIC_GetPriorityGrouping>
 8003b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7ff ff90 	bl	8003a88 <NVIC_EncodePriority>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff5f 	bl	8003a34 <__NVIC_SetPriority>
}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff33 	bl	80039f8 <__NVIC_EnableIRQ>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ffa4 	bl	8003af0 <SysTick_Config>
 8003ba8:	4603      	mov	r3, r0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bc2:	e15a      	b.n	8003e7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 814c 	beq.w	8003e74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d005      	beq.n	8003bf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d130      	bne.n	8003c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0201 	and.w	r2, r3, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d017      	beq.n	8003c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d123      	bne.n	8003ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	6939      	ldr	r1, [r7, #16]
 8003ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0203 	and.w	r2, r3, #3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a6 	beq.w	8003e74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d28:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	4a5a      	ldr	r2, [pc, #360]	; (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6613      	str	r3, [r2, #96]	; 0x60
 8003d34:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d40:	4a56      	ldr	r2, [pc, #344]	; (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d6a:	d01f      	beq.n	8003dac <HAL_GPIO_Init+0x1f8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a4c      	ldr	r2, [pc, #304]	; (8003ea0 <HAL_GPIO_Init+0x2ec>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d019      	beq.n	8003da8 <HAL_GPIO_Init+0x1f4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x1f0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <HAL_GPIO_Init+0x2f4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x1ec>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a49      	ldr	r2, [pc, #292]	; (8003eac <HAL_GPIO_Init+0x2f8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x1e8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a48      	ldr	r2, [pc, #288]	; (8003eb0 <HAL_GPIO_Init+0x2fc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d94:	2305      	movs	r3, #5
 8003d96:	e00a      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003d98:	2306      	movs	r3, #6
 8003d9a:	e008      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003da0:	2303      	movs	r3, #3
 8003da2:	e004      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e002      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003dac:	2300      	movs	r3, #0
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	f002 0203 	and.w	r2, r2, #3
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4093      	lsls	r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dbe:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dcc:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003df0:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003df6:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e1a:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3301      	adds	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f47f ae9d 	bne.w	8003bc4 <HAL_GPIO_Init+0x10>
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	48000400 	.word	0x48000400
 8003ea4:	48000800 	.word	0x48000800
 8003ea8:	48000c00 	.word	0x48000c00
 8003eac:	48001000 	.word	0x48001000
 8003eb0:	48001400 	.word	0x48001400
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed4:	e002      	b.n	8003edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	041a      	lsls	r2, r3, #16
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	43d9      	mvns	r1, r3
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	400b      	ands	r3, r1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f806 	bl	8003f4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40010400 	.word	0x40010400

08003f4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e08d      	b.n	8004090 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fb35 	bl	80035f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2224      	movs	r2, #36	; 0x24
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e006      	b.n	8003fea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d108      	bne.n	8004004 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	e007      	b.n	8004014 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004012:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004026:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004036:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69d9      	ldr	r1, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	460b      	mov	r3, r1
 80040ac:	813b      	strh	r3, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	f040 80f9 	bne.w	80042b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_I2C_Mem_Write+0x34>
 80040c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0ed      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Mem_Write+0x4e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0e6      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ee:	f7ff fc23 	bl	8003938 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fac3 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0d1      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2221      	movs	r2, #33	; 0x21
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004138:	88f8      	ldrh	r0, [r7, #6]
 800413a:	893a      	ldrh	r2, [r7, #8]
 800413c:	8979      	ldrh	r1, [r7, #10]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	4603      	mov	r3, r0
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f9d3 	bl	80044f4 <I2C_RequestMemoryWrite>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0a9      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2bff      	cmp	r3, #255	; 0xff
 8004168:	d90e      	bls.n	8004188 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	b2da      	uxtb	r2, r3
 8004176:	8979      	ldrh	r1, [r7, #10]
 8004178:	2300      	movs	r3, #0
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fc47 	bl	8004a14 <I2C_TransferConfig>
 8004186:	e00f      	b.n	80041a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	b2da      	uxtb	r2, r3
 8004198:	8979      	ldrh	r1, [r7, #10]
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fc36 	bl	8004a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fac6 	bl	800473e <I2C_WaitOnTXISFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e07b      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	781a      	ldrb	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d034      	beq.n	8004260 <HAL_I2C_Mem_Write+0x1c8>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d130      	bne.n	8004260 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fa3f 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e04d      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2bff      	cmp	r3, #255	; 0xff
 8004220:	d90e      	bls.n	8004240 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	b2da      	uxtb	r2, r3
 800422e:	8979      	ldrh	r1, [r7, #10]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fbeb 	bl	8004a14 <I2C_TransferConfig>
 800423e:	e00f      	b.n	8004260 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	b2da      	uxtb	r2, r3
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	2300      	movs	r3, #0
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fbda 	bl	8004a14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d19e      	bne.n	80041a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 faac 	bl	80047cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e01a      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2220      	movs	r2, #32
 8004284:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_I2C_Mem_Write+0x224>)
 8004292:	400b      	ands	r3, r1
 8004294:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	fe00e800 	.word	0xfe00e800

080042c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	461a      	mov	r2, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	817b      	strh	r3, [r7, #10]
 80042d2:	460b      	mov	r3, r1
 80042d4:	813b      	strh	r3, [r7, #8]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	f040 80fd 	bne.w	80044e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x34>
 80042ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0f1      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_I2C_Mem_Read+0x4e>
 800430a:	2302      	movs	r3, #2
 800430c:	e0ea      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004316:	f7ff fb0f 	bl	8003938 <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2319      	movs	r3, #25
 8004322:	2201      	movs	r2, #1
 8004324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f9af 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0d5      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2222      	movs	r2, #34	; 0x22
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a3a      	ldr	r2, [r7, #32]
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004360:	88f8      	ldrh	r0, [r7, #6]
 8004362:	893a      	ldrh	r2, [r7, #8]
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4603      	mov	r3, r0
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f913 	bl	800459c <I2C_RequestMemoryRead>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0ad      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2bff      	cmp	r3, #255	; 0xff
 8004390:	d90e      	bls.n	80043b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	4b52      	ldr	r3, [pc, #328]	; (80044ec <HAL_I2C_Mem_Read+0x22c>)
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fb33 	bl	8004a14 <I2C_TransferConfig>
 80043ae:	e00f      	b.n	80043d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	8979      	ldrh	r1, [r7, #10]
 80043c2:	4b4a      	ldr	r3, [pc, #296]	; (80044ec <HAL_I2C_Mem_Read+0x22c>)
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fb22 	bl	8004a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	2200      	movs	r2, #0
 80043d8:	2104      	movs	r1, #4
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f956 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07c      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d034      	beq.n	8004490 <HAL_I2C_Mem_Read+0x1d0>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	d130      	bne.n	8004490 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	2200      	movs	r2, #0
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f927 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e04d      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	d90e      	bls.n	8004470 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	2300      	movs	r3, #0
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fad3 	bl	8004a14 <I2C_TransferConfig>
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	b2da      	uxtb	r2, r3
 8004480:	8979      	ldrh	r1, [r7, #10]
 8004482:	2300      	movs	r3, #0
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fac2 	bl	8004a14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d19a      	bne.n	80043d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f994 	bl	80047cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e01a      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2220      	movs	r2, #32
 80044b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_I2C_Mem_Read+0x230>)
 80044c2:	400b      	ands	r3, r1
 80044c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	80002400 	.word	0x80002400
 80044f0:	fe00e800 	.word	0xfe00e800

080044f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4603      	mov	r3, r0
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	460b      	mov	r3, r1
 8004508:	813b      	strh	r3, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	8979      	ldrh	r1, [r7, #10]
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <I2C_RequestMemoryWrite+0xa4>)
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fa79 	bl	8004a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f909 	bl	800473e <I2C_WaitOnTXISFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e02c      	b.n	8004590 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
 8004546:	e015      	b.n	8004574 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004548:	893b      	ldrh	r3, [r7, #8]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8ef 	bl	800473e <I2C_WaitOnTXISFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e012      	b.n	8004590 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800456a:	893b      	ldrh	r3, [r7, #8]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2200      	movs	r2, #0
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f884 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	80002000 	.word	0x80002000

0800459c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	817b      	strh	r3, [r7, #10]
 80045ae:	460b      	mov	r3, r1
 80045b0:	813b      	strh	r3, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	8979      	ldrh	r1, [r7, #10]
 80045bc:	4b20      	ldr	r3, [pc, #128]	; (8004640 <I2C_RequestMemoryRead+0xa4>)
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa26 	bl	8004a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8b6 	bl	800473e <I2C_WaitOnTXISFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e02c      	b.n	8004636 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d105      	bne.n	80045ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045e2:	893b      	ldrh	r3, [r7, #8]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
 80045ec:	e015      	b.n	800461a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	69b9      	ldr	r1, [r7, #24]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f89c 	bl	800473e <I2C_WaitOnTXISFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e012      	b.n	8004636 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004610:	893b      	ldrh	r3, [r7, #8]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2200      	movs	r2, #0
 8004622:	2140      	movs	r1, #64	; 0x40
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f831 	bl	800468c <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	80002000 	.word	0x80002000

08004644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d007      	beq.n	8004680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	619a      	str	r2, [r3, #24]
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800469c:	e03b      	b.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f8d6 	bl	8004854 <I2C_IsErrorOccurred>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e041      	b.n	8004736 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d02d      	beq.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ba:	f7ff f93d 	bl	8003938 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d122      	bne.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d113      	bne.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e00f      	b.n	8004736 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	429a      	cmp	r2, r3
 8004732:	d0b4      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800474a:	e033      	b.n	80047b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f87f 	bl	8004854 <I2C_IsErrorOccurred>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e031      	b.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d025      	beq.n	80047b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004768:	f7ff f8e6 	bl	8003938 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11a      	bne.n	80047b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d013      	beq.n	80047b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e007      	b.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d1c4      	bne.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d8:	e02f      	b.n	800483a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f838 	bl	8004854 <I2C_IsErrorOccurred>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e02d      	b.n	800484a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7ff f8a3 	bl	8003938 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11a      	bne.n	800483a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d013      	beq.n	800483a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e007      	b.n	800484a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b20      	cmp	r3, #32
 8004846:	d1c8      	bne.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d068      	beq.n	8004952 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2210      	movs	r2, #16
 8004886:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004888:	e049      	b.n	800491e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d045      	beq.n	800491e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7ff f851 	bl	8003938 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_IsErrorOccurred+0x54>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d13a      	bne.n	800491e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ca:	d121      	bne.n	8004910 <I2C_IsErrorOccurred+0xbc>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d2:	d01d      	beq.n	8004910 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d01a      	beq.n	8004910 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ea:	f7ff f825 	bl	8003938 <HAL_GetTick>
 80048ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f0:	e00e      	b.n	8004910 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048f2:	f7ff f821 	bl	8003938 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b19      	cmp	r3, #25
 80048fe:	d907      	bls.n	8004910 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f043 0320 	orr.w	r3, r3, #32
 8004906:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800490e:	e006      	b.n	800491e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d1e9      	bne.n	80048f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b20      	cmp	r3, #32
 800492a:	d003      	beq.n	8004934 <I2C_IsErrorOccurred+0xe0>
 800492c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0aa      	beq.n	800488a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2220      	movs	r2, #32
 8004942:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f043 0308 	orr.w	r3, r3, #8
 800498c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004996:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01c      	beq.n	8004a02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff fe3b 	bl	8004644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <I2C_IsErrorOccurred+0x1bc>)
 80049da:	400b      	ands	r3, r1
 80049dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3728      	adds	r7, #40	; 0x28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	fe00e800 	.word	0xfe00e800

08004a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	817b      	strh	r3, [r7, #10]
 8004a22:	4613      	mov	r3, r2
 8004a24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a26:	897b      	ldrh	r3, [r7, #10]
 8004a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a2c:	7a7b      	ldrb	r3, [r7, #9]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	0d5b      	lsrs	r3, r3, #21
 8004a4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <I2C_TransferConfig+0x60>)
 8004a54:	430b      	orrs	r3, r1
 8004a56:	43db      	mvns	r3, r3
 8004a58:	ea02 0103 	and.w	r1, r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	03ff63ff 	.word	0x03ff63ff

08004a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d138      	bne.n	8004b00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e032      	b.n	8004b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6819      	ldr	r1, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d139      	bne.n	8004b98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e033      	b.n	8004b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2224      	movs	r2, #36	; 0x24
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e000      	b.n	8004b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d141      	bne.n	8004c3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bb6:	4b4b      	ldr	r3, [pc, #300]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d131      	bne.n	8004c28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc4:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bca:	4a46      	ldr	r2, [pc, #280]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd4:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bdc:	4a41      	ldr	r2, [pc, #260]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be4:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2232      	movs	r2, #50	; 0x32
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	4a3f      	ldr	r2, [pc, #252]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	0c9b      	lsrs	r3, r3, #18
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfa:	e002      	b.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c02:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d102      	bne.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f2      	bne.n	8004bfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c16:	4b33      	ldr	r3, [pc, #204]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d158      	bne.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e057      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2e:	4a2d      	ldr	r2, [pc, #180]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c38:	e04d      	b.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d141      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c42:	4b28      	ldr	r3, [pc, #160]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4e:	d131      	bne.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c50:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c68:	4a1e      	ldr	r2, [pc, #120]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c70:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2232      	movs	r2, #50	; 0x32
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	0c9b      	lsrs	r3, r3, #18
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c86:	e002      	b.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9a:	d102      	bne.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f2      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca2:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d112      	bne.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e011      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cc4:	e007      	b.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cce:	4a05      	ldr	r2, [pc, #20]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40007000 	.word	0x40007000
 8004ce8:	20000018 	.word	0x20000018
 8004cec:	431bde83 	.word	0x431bde83

08004cf0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cfe:	6093      	str	r3, [r2, #8]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40007000 	.word	0x40007000

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e2fe      	b.n	8005320 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d075      	beq.n	8004e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2e:	4b97      	ldr	r3, [pc, #604]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d38:	4b94      	ldr	r3, [pc, #592]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d102      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3e>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCC_OscConfig+0x44>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d54:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x108>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d157      	bne.n	8004e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e2d9      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x74>
 8004d76:	4b85      	ldr	r3, [pc, #532]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a84      	ldr	r2, [pc, #528]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x98>
 8004d8e:	4b7f      	ldr	r3, [pc, #508]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a7e      	ldr	r2, [pc, #504]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b7c      	ldr	r3, [pc, #496]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7b      	ldr	r2, [pc, #492]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004da8:	4b78      	ldr	r3, [pc, #480]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a77      	ldr	r2, [pc, #476]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b75      	ldr	r3, [pc, #468]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a74      	ldr	r2, [pc, #464]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fe fdb6 	bl	8003938 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fe fdb2 	bl	8003938 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e29e      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de2:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xc0>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe fda2 	bl	8003938 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fe fd9e 	bl	8003938 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e28a      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0a:	4b60      	ldr	r3, [pc, #384]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0xe8>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d075      	beq.n	8004f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e26:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e30:	4b56      	ldr	r3, [pc, #344]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d102      	bne.n	8004e46 <HAL_RCC_OscConfig+0x136>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d002      	beq.n	8004e4c <HAL_RCC_OscConfig+0x13c>
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d11f      	bne.n	8004e8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4c:	4b4f      	ldr	r3, [pc, #316]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x154>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e25d      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b49      	ldr	r3, [pc, #292]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	4946      	ldr	r1, [pc, #280]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <HAL_RCC_OscConfig+0x280>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fd0f 	bl	80038a0 <HAL_InitTick>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d043      	beq.n	8004f10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e249      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d023      	beq.n	8004edc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e94:	4b3d      	ldr	r3, [pc, #244]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a3c      	ldr	r2, [pc, #240]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fe fd4a 	bl	8003938 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea8:	f7fe fd46 	bl	8003938 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e232      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eba:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	061b      	lsls	r3, r3, #24
 8004ed4:	492d      	ldr	r1, [pc, #180]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
 8004eda:	e01a      	b.n	8004f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004edc:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fe fd26 	bl	8003938 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef0:	f7fe fd22 	bl	8003938 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e20e      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f02:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x1e0>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d041      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01c      	beq.n	8004f60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f26:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2c:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fe fcff 	bl	8003938 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3e:	f7fe fcfb 	bl	8003938 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e1e7      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ef      	beq.n	8004f3e <HAL_RCC_OscConfig+0x22e>
 8004f5e:	e020      	b.n	8004fa2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <HAL_RCC_OscConfig+0x27c>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fe fce2 	bl	8003938 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f76:	e00d      	b.n	8004f94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f78:	f7fe fcde 	bl	8003938 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d906      	bls.n	8004f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1ca      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f94:	4b8c      	ldr	r3, [pc, #560]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1ea      	bne.n	8004f78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80a6 	beq.w	80050fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fb4:	4b84      	ldr	r3, [pc, #528]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x2b4>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x2b6>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b7f      	ldr	r3, [pc, #508]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	4a7e      	ldr	r2, [pc, #504]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd6:	4b7c      	ldr	r3, [pc, #496]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe6:	4b79      	ldr	r3, [pc, #484]	; (80051cc <HAL_RCC_OscConfig+0x4bc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d118      	bne.n	8005024 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff2:	4b76      	ldr	r3, [pc, #472]	; (80051cc <HAL_RCC_OscConfig+0x4bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a75      	ldr	r2, [pc, #468]	; (80051cc <HAL_RCC_OscConfig+0x4bc>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffe:	f7fe fc9b 	bl	8003938 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005006:	f7fe fc97 	bl	8003938 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e183      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005018:	4b6c      	ldr	r3, [pc, #432]	; (80051cc <HAL_RCC_OscConfig+0x4bc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d108      	bne.n	800503e <HAL_RCC_OscConfig+0x32e>
 800502c:	4b66      	ldr	r3, [pc, #408]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a65      	ldr	r2, [pc, #404]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800503c:	e024      	b.n	8005088 <HAL_RCC_OscConfig+0x378>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b05      	cmp	r3, #5
 8005044:	d110      	bne.n	8005068 <HAL_RCC_OscConfig+0x358>
 8005046:	4b60      	ldr	r3, [pc, #384]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	4a5e      	ldr	r2, [pc, #376]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f043 0304 	orr.w	r3, r3, #4
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005056:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	4a5a      	ldr	r2, [pc, #360]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005066:	e00f      	b.n	8005088 <HAL_RCC_OscConfig+0x378>
 8005068:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	4a56      	ldr	r2, [pc, #344]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005080:	f023 0304 	bic.w	r3, r3, #4
 8005084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d016      	beq.n	80050be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fe fc52 	bl	8003938 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fe fc4e 	bl	8003938 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e138      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ae:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ed      	beq.n	8005098 <HAL_RCC_OscConfig+0x388>
 80050bc:	e015      	b.n	80050ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fe fc3b 	bl	8003938 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7fe fc37 	bl	8003938 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e121      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050dc:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 80050de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ed      	bne.n	80050c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ea:	7ffb      	ldrb	r3, [r7, #31]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f0:	4b35      	ldr	r3, [pc, #212]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d03c      	beq.n	8005182 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01c      	beq.n	800514a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005110:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005116:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fe fc0a 	bl	8003938 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005128:	f7fe fc06 	bl	8003938 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0f2      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513a:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800513c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ef      	beq.n	8005128 <HAL_RCC_OscConfig+0x418>
 8005148:	e01b      	b.n	8005182 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800514a:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800514c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515a:	f7fe fbed 	bl	8003938 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005162:	f7fe fbe9 	bl	8003938 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e0d5      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005174:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 8005176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1ef      	bne.n	8005162 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80c9 	beq.w	800531e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518c:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 030c 	and.w	r3, r3, #12
 8005194:	2b0c      	cmp	r3, #12
 8005196:	f000 8083 	beq.w	80052a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d15e      	bne.n	8005260 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fe fbc3 	bl	8003938 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b4:	e00c      	b.n	80051d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fe fbbf 	bl	8003938 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d905      	bls.n	80051d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e0ab      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d0:	4b55      	ldr	r3, [pc, #340]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ec      	bne.n	80051b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051dc:	4b52      	ldr	r3, [pc, #328]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	4b52      	ldr	r3, [pc, #328]	; (800532c <HAL_RCC_OscConfig+0x61c>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6a11      	ldr	r1, [r2, #32]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ec:	3a01      	subs	r2, #1
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	4311      	orrs	r1, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051f6:	0212      	lsls	r2, r2, #8
 80051f8:	4311      	orrs	r1, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051fe:	0852      	lsrs	r2, r2, #1
 8005200:	3a01      	subs	r2, #1
 8005202:	0552      	lsls	r2, r2, #21
 8005204:	4311      	orrs	r1, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800520a:	0852      	lsrs	r2, r2, #1
 800520c:	3a01      	subs	r2, #1
 800520e:	0652      	lsls	r2, r2, #25
 8005210:	4311      	orrs	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005216:	06d2      	lsls	r2, r2, #27
 8005218:	430a      	orrs	r2, r1
 800521a:	4943      	ldr	r1, [pc, #268]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 800521c:	4313      	orrs	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005220:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a40      	ldr	r2, [pc, #256]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800522c:	4b3e      	ldr	r3, [pc, #248]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4a3d      	ldr	r2, [pc, #244]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005236:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fe fb7e 	bl	8003938 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005240:	f7fe fb7a 	bl	8003938 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e066      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	4b35      	ldr	r3, [pc, #212]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x530>
 800525e:	e05e      	b.n	800531e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005260:	4b31      	ldr	r3, [pc, #196]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a30      	ldr	r2, [pc, #192]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800526a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fe fb64 	bl	8003938 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005274:	f7fe fb60 	bl	8003938 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e04c      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005286:	4b28      	ldr	r3, [pc, #160]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005292:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	4924      	ldr	r1, [pc, #144]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <HAL_RCC_OscConfig+0x620>)
 800529a:	4013      	ands	r3, r2
 800529c:	60cb      	str	r3, [r1, #12]
 800529e:	e03e      	b.n	800531e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e039      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052ac:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <HAL_RCC_OscConfig+0x618>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0203 	and.w	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d12c      	bne.n	800531a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	3b01      	subs	r3, #1
 80052cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d123      	bne.n	800531a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d11b      	bne.n	800531a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d113      	bne.n	800531a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	3b01      	subs	r3, #1
 8005300:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d109      	bne.n	800531a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	3b01      	subs	r3, #1
 8005314:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d001      	beq.n	800531e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3720      	adds	r7, #32
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	019f800c 	.word	0x019f800c
 8005330:	feeefffc 	.word	0xfeeefffc

08005334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e11e      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b91      	ldr	r3, [pc, #580]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d910      	bls.n	800537c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b8e      	ldr	r3, [pc, #568]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 020f 	bic.w	r2, r3, #15
 8005362:	498c      	ldr	r1, [pc, #560]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b8a      	ldr	r3, [pc, #552]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e106      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d073      	beq.n	8005470 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d129      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005390:	4b81      	ldr	r3, [pc, #516]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0f4      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053a0:	f000 f99e 	bl	80056e0 <RCC_GetSysClockFreqFromPLLSource>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4a7c      	ldr	r2, [pc, #496]	; (800559c <HAL_RCC_ClockConfig+0x268>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d93f      	bls.n	800542e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053ae:	4b7a      	ldr	r3, [pc, #488]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d033      	beq.n	800542e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d12f      	bne.n	800542e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053ce:	4b72      	ldr	r3, [pc, #456]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d6:	4a70      	ldr	r2, [pc, #448]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e024      	b.n	800542e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ec:	4b6a      	ldr	r3, [pc, #424]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0c6      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fc:	4b66      	ldr	r3, [pc, #408]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0be      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800540c:	f000 f8ce 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8005410:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4a61      	ldr	r2, [pc, #388]	; (800559c <HAL_RCC_ClockConfig+0x268>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d909      	bls.n	800542e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800541a:	4b5f      	ldr	r3, [pc, #380]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005422:	4a5d      	ldr	r2, [pc, #372]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 8005424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005428:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800542e:	4b5a      	ldr	r3, [pc, #360]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 0203 	bic.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4957      	ldr	r1, [pc, #348]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800543c:	4313      	orrs	r3, r2
 800543e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005440:	f7fe fa7a 	bl	8003938 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	e00a      	b.n	800545e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005448:	f7fe fa76 	bl	8003938 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	; 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e095      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	4b4e      	ldr	r3, [pc, #312]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 020c 	and.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	429a      	cmp	r2, r3
 800546e:	d1eb      	bne.n	8005448 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d023      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005488:	4b43      	ldr	r3, [pc, #268]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a42      	ldr	r2, [pc, #264]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800548e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005492:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054a0:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054a8:	4a3b      	ldr	r2, [pc, #236]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b0:	4b39      	ldr	r3, [pc, #228]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4936      	ldr	r1, [pc, #216]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b80      	cmp	r3, #128	; 0x80
 80054c8:	d105      	bne.n	80054d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ca:	4b33      	ldr	r3, [pc, #204]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	4a32      	ldr	r2, [pc, #200]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 80054d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d6:	4b2f      	ldr	r3, [pc, #188]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d21d      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e4:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f023 020f 	bic.w	r2, r3, #15
 80054ec:	4929      	ldr	r1, [pc, #164]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054f4:	f7fe fa20 	bl	8003938 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7fe fa1c 	bl	8003938 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e03b      	b.n	800558a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <HAL_RCC_ClockConfig+0x260>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d1ed      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4917      	ldr	r1, [pc, #92]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	490f      	ldr	r1, [pc, #60]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800555e:	f000 f825 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8005562:	4602      	mov	r2, r0
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <HAL_RCC_ClockConfig+0x264>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	490c      	ldr	r1, [pc, #48]	; (80055a0 <HAL_RCC_ClockConfig+0x26c>)
 8005570:	5ccb      	ldrb	r3, [r1, r3]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <HAL_RCC_ClockConfig+0x270>)
 800557c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_RCC_ClockConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe f98c 	bl	80038a0 <HAL_InitTick>
 8005588:	4603      	mov	r3, r0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40022000 	.word	0x40022000
 8005598:	40021000 	.word	0x40021000
 800559c:	04c4b400 	.word	0x04c4b400
 80055a0:	08006ee4 	.word	0x08006ee4
 80055a4:	20000018 	.word	0x20000018
 80055a8:	2000001c 	.word	0x2000001c

080055ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055b2:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d102      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055be:	4b2a      	ldr	r3, [pc, #168]	; (8005668 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e047      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055c4:	4b27      	ldr	r3, [pc, #156]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d102      	bne.n	80055d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d0:	4b26      	ldr	r3, [pc, #152]	; (800566c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	e03e      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055d6:	4b23      	ldr	r3, [pc, #140]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d136      	bne.n	8005650 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ec:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	3301      	adds	r3, #1
 80055f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005600:	4a1a      	ldr	r2, [pc, #104]	; (800566c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	4a16      	ldr	r2, [pc, #88]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 800560a:	68d2      	ldr	r2, [r2, #12]
 800560c:	0a12      	lsrs	r2, r2, #8
 800560e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	617b      	str	r3, [r7, #20]
      break;
 8005618:	e00c      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800561a:	4a13      	ldr	r2, [pc, #76]	; (8005668 <HAL_RCC_GetSysClockFreq+0xbc>)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	4a10      	ldr	r2, [pc, #64]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005624:	68d2      	ldr	r2, [r2, #12]
 8005626:	0a12      	lsrs	r2, r2, #8
 8005628:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
      break;
 8005632:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	0e5b      	lsrs	r3, r3, #25
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	3301      	adds	r3, #1
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e001      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005654:	693b      	ldr	r3, [r7, #16]
}
 8005656:	4618      	mov	r0, r3
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000
 8005668:	00f42400 	.word	0x00f42400
 800566c:	016e3600 	.word	0x016e3600

08005670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <HAL_RCC_GetHCLKFreq+0x14>)
 8005676:	681b      	ldr	r3, [r3, #0]
}
 8005678:	4618      	mov	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000018 	.word	0x20000018

08005688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800568c:	f7ff fff0 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	4904      	ldr	r1, [pc, #16]	; (80056b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	08006ef4 	.word	0x08006ef4

080056b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056b8:	f7ff ffda 	bl	8005670 <HAL_RCC_GetHCLKFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0adb      	lsrs	r3, r3, #11
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4904      	ldr	r1, [pc, #16]	; (80056dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	08006ef4 	.word	0x08006ef4

080056e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d10c      	bne.n	800571e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005704:	4a17      	ldr	r2, [pc, #92]	; (8005764 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	4a14      	ldr	r2, [pc, #80]	; (8005760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800570e:	68d2      	ldr	r2, [r2, #12]
 8005710:	0a12      	lsrs	r2, r2, #8
 8005712:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]
    break;
 800571c:	e00c      	b.n	8005738 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	fbb2 f3f3 	udiv	r3, r2, r3
 8005726:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005728:	68d2      	ldr	r2, [r2, #12]
 800572a:	0a12      	lsrs	r2, r2, #8
 800572c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]
    break;
 8005736:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	0e5b      	lsrs	r3, r3, #25
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	3301      	adds	r3, #1
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005752:	687b      	ldr	r3, [r7, #4]
}
 8005754:	4618      	mov	r0, r3
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40021000 	.word	0x40021000
 8005764:	016e3600 	.word	0x016e3600
 8005768:	00f42400 	.word	0x00f42400

0800576c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005774:	2300      	movs	r3, #0
 8005776:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005778:	2300      	movs	r3, #0
 800577a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8098 	beq.w	80058ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800578a:	2300      	movs	r3, #0
 800578c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578e:	4b43      	ldr	r3, [pc, #268]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800579a:	4b40      	ldr	r3, [pc, #256]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	4a3f      	ldr	r2, [pc, #252]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6593      	str	r3, [r2, #88]	; 0x58
 80057a6:	4b3d      	ldr	r3, [pc, #244]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b2:	2301      	movs	r3, #1
 80057b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b6:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a39      	ldr	r2, [pc, #228]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057c2:	f7fe f8b9 	bl	8003938 <HAL_GetTick>
 80057c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057c8:	e009      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ca:	f7fe f8b5 	bl	8003938 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d902      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	74fb      	strb	r3, [r7, #19]
        break;
 80057dc:	e005      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057de:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0ef      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057ea:	7cfb      	ldrb	r3, [r7, #19]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d159      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057f0:	4b2a      	ldr	r3, [pc, #168]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01e      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	429a      	cmp	r2, r3
 800580a:	d019      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800580c:	4b23      	ldr	r3, [pc, #140]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005816:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005828:	4b1c      	ldr	r3, [pc, #112]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005838:	4a18      	ldr	r2, [pc, #96]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fe f875 	bl	8003938 <HAL_GetTick>
 800584e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005850:	e00b      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005852:	f7fe f871 	bl	8003938 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d902      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	74fb      	strb	r3, [r7, #19]
            break;
 8005868:	e006      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ec      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005894:	e008      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005896:	7cfb      	ldrb	r3, [r7, #19]
 8005898:	74bb      	strb	r3, [r7, #18]
 800589a:	e005      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800589c:	40021000 	.word	0x40021000
 80058a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7cfb      	ldrb	r3, [r7, #19]
 80058a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058a8:	7c7b      	ldrb	r3, [r7, #17]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d105      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ae:	4ba7      	ldr	r3, [pc, #668]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	4aa6      	ldr	r2, [pc, #664]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058c6:	4ba1      	ldr	r3, [pc, #644]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f023 0203 	bic.w	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	499d      	ldr	r1, [pc, #628]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058e8:	4b98      	ldr	r3, [pc, #608]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f023 020c 	bic.w	r2, r3, #12
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4995      	ldr	r1, [pc, #596]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800590a:	4b90      	ldr	r3, [pc, #576]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	498c      	ldr	r1, [pc, #560]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800592c:	4b87      	ldr	r3, [pc, #540]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	4984      	ldr	r1, [pc, #528]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800594e:	4b7f      	ldr	r3, [pc, #508]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	497b      	ldr	r1, [pc, #492]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005970:	4b76      	ldr	r3, [pc, #472]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	4973      	ldr	r1, [pc, #460]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005992:	4b6e      	ldr	r3, [pc, #440]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	496a      	ldr	r1, [pc, #424]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059b4:	4b65      	ldr	r3, [pc, #404]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	4962      	ldr	r1, [pc, #392]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059d6:	4b5d      	ldr	r3, [pc, #372]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	4959      	ldr	r1, [pc, #356]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059f8:	4b54      	ldr	r3, [pc, #336]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059fe:	f023 0203 	bic.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	4951      	ldr	r1, [pc, #324]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1a:	4b4c      	ldr	r3, [pc, #304]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4948      	ldr	r1, [pc, #288]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a3c:	4b43      	ldr	r3, [pc, #268]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	4940      	ldr	r1, [pc, #256]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a5c:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a3a      	ldr	r2, [pc, #232]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d015      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	4932      	ldr	r1, [pc, #200]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a94:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005aac:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	4924      	ldr	r1, [pc, #144]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005acc:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d015      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	4916      	ldr	r1, [pc, #88]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b02:	d105      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b04:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a10      	ldr	r2, [pc, #64]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4908      	ldr	r1, [pc, #32]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3a:	d109      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a02      	ldr	r2, [pc, #8]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b46:	60d3      	str	r3, [r2, #12]
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b5c:	4b29      	ldr	r3, [pc, #164]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	4926      	ldr	r1, [pc, #152]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b7c:	4b21      	ldr	r3, [pc, #132]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d015      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b94:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	4918      	ldr	r1, [pc, #96]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4a12      	ldr	r2, [pc, #72]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d015      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	490a      	ldr	r1, [pc, #40]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bea:	d105      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005bf8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000

08005c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e042      	b.n	8005ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fd fd59 	bl	80036e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb24 	bl	80062a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f825 	bl	8005ca8 <UART_SetConfig>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e01b      	b.n	8005ca0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fba3 	bl	80063e4 <UART_CheckIdleState>
 8005c9e:	4603      	mov	r3, r0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b08c      	sub	sp, #48	; 0x30
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4baa      	ldr	r3, [pc, #680]	; (8005f80 <UART_SetConfig+0x2d8>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a9f      	ldr	r2, [pc, #636]	; (8005f84 <UART_SetConfig+0x2dc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	4313      	orrs	r3, r2
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f023 010f 	bic.w	r1, r3, #15
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a90      	ldr	r2, [pc, #576]	; (8005f88 <UART_SetConfig+0x2e0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d125      	bne.n	8005d98 <UART_SetConfig+0xf0>
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <UART_SetConfig+0x2e4>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d81a      	bhi.n	8005d90 <UART_SetConfig+0xe8>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0xb8>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d76:	e116      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7e:	e112      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d86:	e10e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8e:	e10a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d96:	e106      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a7c      	ldr	r2, [pc, #496]	; (8005f90 <UART_SetConfig+0x2e8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d138      	bne.n	8005e14 <UART_SetConfig+0x16c>
 8005da2:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <UART_SetConfig+0x2e4>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d82d      	bhi.n	8005e0c <UART_SetConfig+0x164>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x110>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df2:	e0d8      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005df4:	2302      	movs	r3, #2
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dfa:	e0d4      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e02:	e0d0      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	e0cc      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e12:	e0c8      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5e      	ldr	r2, [pc, #376]	; (8005f94 <UART_SetConfig+0x2ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d125      	bne.n	8005e6a <UART_SetConfig+0x1c2>
 8005e1e:	4b5b      	ldr	r3, [pc, #364]	; (8005f8c <UART_SetConfig+0x2e4>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d016      	beq.n	8005e5a <UART_SetConfig+0x1b2>
 8005e2c:	2b30      	cmp	r3, #48	; 0x30
 8005e2e:	d818      	bhi.n	8005e62 <UART_SetConfig+0x1ba>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d00a      	beq.n	8005e4a <UART_SetConfig+0x1a2>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d814      	bhi.n	8005e62 <UART_SetConfig+0x1ba>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <UART_SetConfig+0x19a>
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d008      	beq.n	8005e52 <UART_SetConfig+0x1aa>
 8005e40:	e00f      	b.n	8005e62 <UART_SetConfig+0x1ba>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e48:	e0ad      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e50:	e0a9      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e52:	2304      	movs	r3, #4
 8005e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e58:	e0a5      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e60:	e0a1      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e62:	2310      	movs	r3, #16
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e68:	e09d      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <UART_SetConfig+0x2f0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d125      	bne.n	8005ec0 <UART_SetConfig+0x218>
 8005e74:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <UART_SetConfig+0x2e4>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e80:	d016      	beq.n	8005eb0 <UART_SetConfig+0x208>
 8005e82:	2bc0      	cmp	r3, #192	; 0xc0
 8005e84:	d818      	bhi.n	8005eb8 <UART_SetConfig+0x210>
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d00a      	beq.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d814      	bhi.n	8005eb8 <UART_SetConfig+0x210>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <UART_SetConfig+0x1f0>
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x200>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x210>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e082      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e07e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e07a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e076      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	e072      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a35      	ldr	r2, [pc, #212]	; (8005f9c <UART_SetConfig+0x2f4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d12a      	bne.n	8005f20 <UART_SetConfig+0x278>
 8005eca:	4b30      	ldr	r3, [pc, #192]	; (8005f8c <UART_SetConfig+0x2e4>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ed8:	d01a      	beq.n	8005f10 <UART_SetConfig+0x268>
 8005eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0x270>
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee4:	d00c      	beq.n	8005f00 <UART_SetConfig+0x258>
 8005ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eea:	d815      	bhi.n	8005f18 <UART_SetConfig+0x270>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <UART_SetConfig+0x250>
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef4:	d008      	beq.n	8005f08 <UART_SetConfig+0x260>
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x270>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e052      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e04e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e04a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e046      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e042      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <UART_SetConfig+0x2dc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d13a      	bne.n	8005fa0 <UART_SetConfig+0x2f8>
 8005f2a:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <UART_SetConfig+0x2e4>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f38:	d01a      	beq.n	8005f70 <UART_SetConfig+0x2c8>
 8005f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f3e:	d81b      	bhi.n	8005f78 <UART_SetConfig+0x2d0>
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f44:	d00c      	beq.n	8005f60 <UART_SetConfig+0x2b8>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d815      	bhi.n	8005f78 <UART_SetConfig+0x2d0>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <UART_SetConfig+0x2b0>
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f54:	d008      	beq.n	8005f68 <UART_SetConfig+0x2c0>
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x2d0>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e022      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f60:	2302      	movs	r3, #2
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f66:	e01e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6e:	e01a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f76:	e016      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f7e:	e012      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f80:	cfff69f3 	.word	0xcfff69f3
 8005f84:	40008000 	.word	0x40008000
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40004400 	.word	0x40004400
 8005f94:	40004800 	.word	0x40004800
 8005f98:	40004c00 	.word	0x40004c00
 8005f9c:	40005000 	.word	0x40005000
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4aae      	ldr	r2, [pc, #696]	; (8006264 <UART_SetConfig+0x5bc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f040 8097 	bne.w	80060e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d823      	bhi.n	8006002 <UART_SetConfig+0x35a>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x318>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08005ff3 	.word	0x08005ff3
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006003 	.word	0x08006003
 8005fe0:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7ff fb50 	bl	8005688 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fea:	e010      	b.n	800600e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b9e      	ldr	r3, [pc, #632]	; (8006268 <UART_SetConfig+0x5c0>)
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ff0:	e00d      	b.n	800600e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7ff fadb 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8005ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ff8:	e009      	b.n	800600e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006000:	e005      	b.n	800600e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800600c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8130 	beq.w	8006276 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	4a94      	ldr	r2, [pc, #592]	; (800626c <UART_SetConfig+0x5c4>)
 800601c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006020:	461a      	mov	r2, r3
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	fbb3 f3f2 	udiv	r3, r3, r2
 8006028:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	429a      	cmp	r2, r3
 8006038:	d305      	bcc.n	8006046 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	d903      	bls.n	800604e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800604c:	e113      	b.n	8006276 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	2200      	movs	r2, #0
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	60fa      	str	r2, [r7, #12]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	4a84      	ldr	r2, [pc, #528]	; (800626c <UART_SetConfig+0x5c4>)
 800605c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006060:	b29b      	uxth	r3, r3
 8006062:	2200      	movs	r2, #0
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006070:	f7fa fcf0 	bl	8000a54 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	020b      	lsls	r3, r1, #8
 8006086:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800608a:	0202      	lsls	r2, r0, #8
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	6849      	ldr	r1, [r1, #4]
 8006090:	0849      	lsrs	r1, r1, #1
 8006092:	2000      	movs	r0, #0
 8006094:	460c      	mov	r4, r1
 8006096:	4605      	mov	r5, r0
 8006098:	eb12 0804 	adds.w	r8, r2, r4
 800609c:	eb43 0905 	adc.w	r9, r3, r5
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	469a      	mov	sl, r3
 80060a8:	4693      	mov	fp, r2
 80060aa:	4652      	mov	r2, sl
 80060ac:	465b      	mov	r3, fp
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa fccf 	bl	8000a54 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4613      	mov	r3, r2
 80060bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c4:	d308      	bcc.n	80060d8 <UART_SetConfig+0x430>
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060cc:	d204      	bcs.n	80060d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	e0ce      	b.n	8006276 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060de:	e0ca      	b.n	8006276 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d166      	bne.n	80061b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d827      	bhi.n	8006142 <UART_SetConfig+0x49a>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <UART_SetConfig+0x450>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006125 	.word	0x08006125
 8006100:	0800612d 	.word	0x0800612d
 8006104:	08006143 	.word	0x08006143
 8006108:	08006133 	.word	0x08006133
 800610c:	08006143 	.word	0x08006143
 8006110:	08006143 	.word	0x08006143
 8006114:	08006143 	.word	0x08006143
 8006118:	0800613b 	.word	0x0800613b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611c:	f7ff fab4 	bl	8005688 <HAL_RCC_GetPCLK1Freq>
 8006120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006122:	e014      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006124:	f7ff fac6 	bl	80056b4 <HAL_RCC_GetPCLK2Freq>
 8006128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800612a:	e010      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800612c:	4b4e      	ldr	r3, [pc, #312]	; (8006268 <UART_SetConfig+0x5c0>)
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006130:	e00d      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006132:	f7ff fa3b 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006138:	e009      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006140:	e005      	b.n	800614e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800614c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8090 	beq.w	8006276 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	4a44      	ldr	r2, [pc, #272]	; (800626c <UART_SetConfig+0x5c4>)
 800615c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006160:	461a      	mov	r2, r3
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	fbb3 f3f2 	udiv	r3, r3, r2
 8006168:	005a      	lsls	r2, r3, #1
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	441a      	add	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	fbb2 f3f3 	udiv	r3, r2, r3
 800617a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b0f      	cmp	r3, #15
 8006180:	d916      	bls.n	80061b0 <UART_SetConfig+0x508>
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d212      	bcs.n	80061b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f023 030f 	bic.w	r3, r3, #15
 8006192:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	b29b      	uxth	r3, r3
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	b29a      	uxth	r2, r3
 80061a0:	8bfb      	ldrh	r3, [r7, #30]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	8bfa      	ldrh	r2, [r7, #30]
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	e062      	b.n	8006276 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061b6:	e05e      	b.n	8006276 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d828      	bhi.n	8006212 <UART_SetConfig+0x56a>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x520>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7ff fa4c 	bl	8005688 <HAL_RCC_GetPCLK1Freq>
 80061f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061f2:	e014      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7ff fa5e 	bl	80056b4 <HAL_RCC_GetPCLK2Freq>
 80061f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b1a      	ldr	r3, [pc, #104]	; (8006268 <UART_SetConfig+0x5c0>)
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7ff f9d3 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8006206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800621c:	bf00      	nop
    }

    if (pclk != 0U)
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d028      	beq.n	8006276 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	4a10      	ldr	r2, [pc, #64]	; (800626c <UART_SetConfig+0x5c4>)
 800622a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622e:	461a      	mov	r2, r3
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	fbb3 f2f2 	udiv	r2, r3, r2
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	441a      	add	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	fbb2 f3f3 	udiv	r3, r2, r3
 8006246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d910      	bls.n	8006270 <UART_SetConfig+0x5c8>
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d20c      	bcs.n	8006270 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	b29a      	uxth	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e009      	b.n	8006276 <UART_SetConfig+0x5ce>
 8006262:	bf00      	nop
 8006264:	40008000 	.word	0x40008000
 8006268:	00f42400 	.word	0x00f42400
 800626c:	08006efc 	.word	0x08006efc
      }
      else
      {
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2201      	movs	r2, #1
 800627a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2201      	movs	r2, #1
 8006282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006292:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006296:	4618      	mov	r0, r3
 8006298:	3730      	adds	r7, #48	; 0x30
 800629a:	46bd      	mov	sp, r7
 800629c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01a      	beq.n	80063b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800639e:	d10a      	bne.n	80063b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b098      	sub	sp, #96	; 0x60
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063f4:	f7fd faa0 	bl	8003938 <HAL_GetTick>
 80063f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d12f      	bne.n	8006468 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f88e 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d022      	beq.n	8006468 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006436:	653b      	str	r3, [r7, #80]	; 0x50
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006440:	647b      	str	r3, [r7, #68]	; 0x44
 8006442:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e063      	b.n	8006530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b04      	cmp	r3, #4
 8006474:	d149      	bne.n	800650a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006476:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800647e:	2200      	movs	r2, #0
 8006480:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f857 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d03c      	beq.n	800650a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	623b      	str	r3, [r7, #32]
   return(result);
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30
 80064b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e6      	bne.n	8006490 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e2:	61fa      	str	r2, [r7, #28]
 80064e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	69b9      	ldr	r1, [r7, #24]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	617b      	str	r3, [r7, #20]
   return(result);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e5      	bne.n	80064c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e012      	b.n	8006530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3758      	adds	r7, #88	; 0x58
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	e04f      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d04b      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fd f9f1 	bl	8003938 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <UART_WaitOnFlagUntilTimeout+0x30>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e04e      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d037      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b80      	cmp	r3, #128	; 0x80
 800657e:	d034      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d031      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d110      	bne.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2208      	movs	r2, #8
 800659a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f838 	bl	8006612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2208      	movs	r2, #8
 80065a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e029      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c4:	d111      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f81e 	bl	8006612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e00f      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69da      	ldr	r2, [r3, #28]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4013      	ands	r3, r2
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	429a      	cmp	r2, r3
 8006606:	d0a0      	beq.n	800654a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b095      	sub	sp, #84	; 0x54
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006638:	643b      	str	r3, [r7, #64]	; 0x40
 800663a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800663e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3308      	adds	r3, #8
 8006652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	61fb      	str	r3, [r7, #28]
   return(result);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	64bb      	str	r3, [r7, #72]	; 0x48
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e3      	bne.n	800664c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d118      	bne.n	80066be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60bb      	str	r3, [r7, #8]
   return(result);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	647b      	str	r3, [r7, #68]	; 0x44
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066d2:	bf00      	nop
 80066d4:	3754      	adds	r7, #84	; 0x54
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e027      	b.n	8006744 <HAL_UARTEx_DisableFifoMode+0x66>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	; 0x24
 8006700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006722:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006764:	2302      	movs	r3, #2
 8006766:	e02d      	b.n	80067c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2224      	movs	r2, #36	; 0x24
 8006774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f84f 	bl	8006848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e02d      	b.n	8006840 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	; 0x24
 80067f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f811 	bl	8006848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006854:	2b00      	cmp	r3, #0
 8006856:	d108      	bne.n	800686a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006868:	e031      	b.n	80068ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800686a:	2308      	movs	r3, #8
 800686c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800686e:	2308      	movs	r3, #8
 8006870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	0e5b      	lsrs	r3, r3, #25
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	0f5b      	lsrs	r3, r3, #29
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	7b3a      	ldrb	r2, [r7, #12]
 8006896:	4911      	ldr	r1, [pc, #68]	; (80068dc <UARTEx_SetNbDataToProcess+0x94>)
 8006898:	5c8a      	ldrb	r2, [r1, r2]
 800689a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800689e:	7b3a      	ldrb	r2, [r7, #12]
 80068a0:	490f      	ldr	r1, [pc, #60]	; (80068e0 <UARTEx_SetNbDataToProcess+0x98>)
 80068a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	7b7a      	ldrb	r2, [r7, #13]
 80068b4:	4909      	ldr	r1, [pc, #36]	; (80068dc <UARTEx_SetNbDataToProcess+0x94>)
 80068b6:	5c8a      	ldrb	r2, [r1, r2]
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068bc:	7b7a      	ldrb	r2, [r7, #13]
 80068be:	4908      	ldr	r1, [pc, #32]	; (80068e0 <UARTEx_SetNbDataToProcess+0x98>)
 80068c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	08006f14 	.word	0x08006f14
 80068e0:	08006f1c 	.word	0x08006f1c

080068e4 <__errno>:
 80068e4:	4b01      	ldr	r3, [pc, #4]	; (80068ec <__errno+0x8>)
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000024 	.word	0x20000024

080068f0 <__libc_init_array>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	4d0d      	ldr	r5, [pc, #52]	; (8006928 <__libc_init_array+0x38>)
 80068f4:	4c0d      	ldr	r4, [pc, #52]	; (800692c <__libc_init_array+0x3c>)
 80068f6:	1b64      	subs	r4, r4, r5
 80068f8:	10a4      	asrs	r4, r4, #2
 80068fa:	2600      	movs	r6, #0
 80068fc:	42a6      	cmp	r6, r4
 80068fe:	d109      	bne.n	8006914 <__libc_init_array+0x24>
 8006900:	4d0b      	ldr	r5, [pc, #44]	; (8006930 <__libc_init_array+0x40>)
 8006902:	4c0c      	ldr	r4, [pc, #48]	; (8006934 <__libc_init_array+0x44>)
 8006904:	f000 fad8 	bl	8006eb8 <_init>
 8006908:	1b64      	subs	r4, r4, r5
 800690a:	10a4      	asrs	r4, r4, #2
 800690c:	2600      	movs	r6, #0
 800690e:	42a6      	cmp	r6, r4
 8006910:	d105      	bne.n	800691e <__libc_init_array+0x2e>
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	f855 3b04 	ldr.w	r3, [r5], #4
 8006918:	4798      	blx	r3
 800691a:	3601      	adds	r6, #1
 800691c:	e7ee      	b.n	80068fc <__libc_init_array+0xc>
 800691e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006922:	4798      	blx	r3
 8006924:	3601      	adds	r6, #1
 8006926:	e7f2      	b.n	800690e <__libc_init_array+0x1e>
 8006928:	08006f68 	.word	0x08006f68
 800692c:	08006f68 	.word	0x08006f68
 8006930:	08006f68 	.word	0x08006f68
 8006934:	08006f6c 	.word	0x08006f6c

08006938 <memset>:
 8006938:	4402      	add	r2, r0
 800693a:	4603      	mov	r3, r0
 800693c:	4293      	cmp	r3, r2
 800693e:	d100      	bne.n	8006942 <memset+0xa>
 8006940:	4770      	bx	lr
 8006942:	f803 1b01 	strb.w	r1, [r3], #1
 8006946:	e7f9      	b.n	800693c <memset+0x4>

08006948 <asinf>:
 8006948:	b508      	push	{r3, lr}
 800694a:	ed2d 8b02 	vpush	{d8}
 800694e:	eeb0 8a40 	vmov.f32	s16, s0
 8006952:	f000 f845 	bl	80069e0 <__ieee754_asinf>
 8006956:	eeb4 8a48 	vcmp.f32	s16, s16
 800695a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695e:	eef0 8a40 	vmov.f32	s17, s0
 8006962:	d615      	bvs.n	8006990 <asinf+0x48>
 8006964:	eeb0 0a48 	vmov.f32	s0, s16
 8006968:	f000 fa98 	bl	8006e9c <fabsf>
 800696c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006970:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006978:	dd0a      	ble.n	8006990 <asinf+0x48>
 800697a:	f7ff ffb3 	bl	80068e4 <__errno>
 800697e:	ecbd 8b02 	vpop	{d8}
 8006982:	2321      	movs	r3, #33	; 0x21
 8006984:	6003      	str	r3, [r0, #0]
 8006986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800698a:	4804      	ldr	r0, [pc, #16]	; (800699c <asinf+0x54>)
 800698c:	f000 ba8e 	b.w	8006eac <nanf>
 8006990:	eeb0 0a68 	vmov.f32	s0, s17
 8006994:	ecbd 8b02 	vpop	{d8}
 8006998:	bd08      	pop	{r3, pc}
 800699a:	bf00      	nop
 800699c:	08006f24 	.word	0x08006f24

080069a0 <atan2f>:
 80069a0:	f000 b904 	b.w	8006bac <__ieee754_atan2f>

080069a4 <sqrtf>:
 80069a4:	b508      	push	{r3, lr}
 80069a6:	ed2d 8b02 	vpush	{d8}
 80069aa:	eeb0 8a40 	vmov.f32	s16, s0
 80069ae:	f000 f99d 	bl	8006cec <__ieee754_sqrtf>
 80069b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80069b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ba:	d60c      	bvs.n	80069d6 <sqrtf+0x32>
 80069bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80069dc <sqrtf+0x38>
 80069c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80069c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c8:	d505      	bpl.n	80069d6 <sqrtf+0x32>
 80069ca:	f7ff ff8b 	bl	80068e4 <__errno>
 80069ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80069d2:	2321      	movs	r3, #33	; 0x21
 80069d4:	6003      	str	r3, [r0, #0]
 80069d6:	ecbd 8b02 	vpop	{d8}
 80069da:	bd08      	pop	{r3, pc}
 80069dc:	00000000 	.word	0x00000000

080069e0 <__ieee754_asinf>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	ee10 5a10 	vmov	r5, s0
 80069e6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80069ea:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80069ee:	ed2d 8b04 	vpush	{d8-d9}
 80069f2:	d10c      	bne.n	8006a0e <__ieee754_asinf+0x2e>
 80069f4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8006b6c <__ieee754_asinf+0x18c>
 80069f8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8006b70 <__ieee754_asinf+0x190>
 80069fc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006a00:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a04:	eeb0 0a67 	vmov.f32	s0, s15
 8006a08:	ecbd 8b04 	vpop	{d8-d9}
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
 8006a0e:	dd04      	ble.n	8006a1a <__ieee754_asinf+0x3a>
 8006a10:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006a14:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006a18:	e7f6      	b.n	8006a08 <__ieee754_asinf+0x28>
 8006a1a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006a1e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006a22:	da0b      	bge.n	8006a3c <__ieee754_asinf+0x5c>
 8006a24:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8006a28:	da52      	bge.n	8006ad0 <__ieee754_asinf+0xf0>
 8006a2a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8006b74 <__ieee754_asinf+0x194>
 8006a2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006a32:	eef4 7ae8 	vcmpe.f32	s15, s17
 8006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3a:	dce5      	bgt.n	8006a08 <__ieee754_asinf+0x28>
 8006a3c:	f000 fa2e 	bl	8006e9c <fabsf>
 8006a40:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8006a44:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8006a48:	ee20 8a08 	vmul.f32	s16, s0, s16
 8006a4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8006b78 <__ieee754_asinf+0x198>
 8006a50:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8006b7c <__ieee754_asinf+0x19c>
 8006a54:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8006b80 <__ieee754_asinf+0x1a0>
 8006a58:	eea8 7a27 	vfma.f32	s14, s16, s15
 8006a5c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006b84 <__ieee754_asinf+0x1a4>
 8006a60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006a64:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006b88 <__ieee754_asinf+0x1a8>
 8006a68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006a6c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8006b8c <__ieee754_asinf+0x1ac>
 8006a70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006a74:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006b90 <__ieee754_asinf+0x1b0>
 8006a78:	eea7 9a88 	vfma.f32	s18, s15, s16
 8006a7c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8006b94 <__ieee754_asinf+0x1b4>
 8006a80:	eee8 7a07 	vfma.f32	s15, s16, s14
 8006a84:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006b98 <__ieee754_asinf+0x1b8>
 8006a88:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006a8c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006b9c <__ieee754_asinf+0x1bc>
 8006a90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006a94:	eeb0 0a48 	vmov.f32	s0, s16
 8006a98:	eee7 8a88 	vfma.f32	s17, s15, s16
 8006a9c:	f000 f926 	bl	8006cec <__ieee754_sqrtf>
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <__ieee754_asinf+0x1c0>)
 8006aa2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8006aac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ab0:	dd3d      	ble.n	8006b2e <__ieee754_asinf+0x14e>
 8006ab2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8006ab6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8006ba4 <__ieee754_asinf+0x1c4>
 8006aba:	eee0 7a26 	vfma.f32	s15, s0, s13
 8006abe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006b70 <__ieee754_asinf+0x190>
 8006ac2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	bfd8      	it	le
 8006aca:	eeb1 0a40 	vnegle.f32	s0, s0
 8006ace:	e79b      	b.n	8006a08 <__ieee754_asinf+0x28>
 8006ad0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006ad4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006b78 <__ieee754_asinf+0x198>
 8006ad8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006b7c <__ieee754_asinf+0x19c>
 8006adc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006b90 <__ieee754_asinf+0x1b0>
 8006ae0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006ae4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006b84 <__ieee754_asinf+0x1a4>
 8006ae8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006aec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006b88 <__ieee754_asinf+0x1a8>
 8006af0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006af4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006b8c <__ieee754_asinf+0x1ac>
 8006af8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006afc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006b80 <__ieee754_asinf+0x1a0>
 8006b00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006b94 <__ieee754_asinf+0x1b4>
 8006b08:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006b0c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8006b98 <__ieee754_asinf+0x1b8>
 8006b10:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006b14:	eddf 6a21 	vldr	s13, [pc, #132]	; 8006b9c <__ieee754_asinf+0x1bc>
 8006b18:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b20:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006b24:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8006b28:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006b2c:	e76c      	b.n	8006a08 <__ieee754_asinf+0x28>
 8006b2e:	ee10 3a10 	vmov	r3, s0
 8006b32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b36:	f023 030f 	bic.w	r3, r3, #15
 8006b3a:	ee07 3a10 	vmov	s14, r3
 8006b3e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8006b42:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006b46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006b4a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8006b4e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006b6c <__ieee754_asinf+0x18c>
 8006b52:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8006b56:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8006b5a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8006ba8 <__ieee754_asinf+0x1c8>
 8006b5e:	eeb0 6a40 	vmov.f32	s12, s0
 8006b62:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006b66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006b6a:	e7aa      	b.n	8006ac2 <__ieee754_asinf+0xe2>
 8006b6c:	b33bbd2e 	.word	0xb33bbd2e
 8006b70:	3fc90fdb 	.word	0x3fc90fdb
 8006b74:	7149f2ca 	.word	0x7149f2ca
 8006b78:	3811ef08 	.word	0x3811ef08
 8006b7c:	3a4f7f04 	.word	0x3a4f7f04
 8006b80:	3e2aaaab 	.word	0x3e2aaaab
 8006b84:	bd241146 	.word	0xbd241146
 8006b88:	3e4e0aa8 	.word	0x3e4e0aa8
 8006b8c:	bea6b090 	.word	0xbea6b090
 8006b90:	3d9dc62e 	.word	0x3d9dc62e
 8006b94:	bf303361 	.word	0xbf303361
 8006b98:	4001572d 	.word	0x4001572d
 8006b9c:	c019d139 	.word	0xc019d139
 8006ba0:	3f799999 	.word	0x3f799999
 8006ba4:	333bbd2e 	.word	0x333bbd2e
 8006ba8:	3f490fdb 	.word	0x3f490fdb

08006bac <__ieee754_atan2f>:
 8006bac:	ee10 2a90 	vmov	r2, s1
 8006bb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006bb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	eef0 7a40 	vmov.f32	s15, s0
 8006bbe:	dc06      	bgt.n	8006bce <__ieee754_atan2f+0x22>
 8006bc0:	ee10 0a10 	vmov	r0, s0
 8006bc4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006bc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006bcc:	dd04      	ble.n	8006bd8 <__ieee754_atan2f+0x2c>
 8006bce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006bdc:	d103      	bne.n	8006be6 <__ieee754_atan2f+0x3a>
 8006bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be2:	f000 b887 	b.w	8006cf4 <atanf>
 8006be6:	1794      	asrs	r4, r2, #30
 8006be8:	f004 0402 	and.w	r4, r4, #2
 8006bec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006bf0:	b943      	cbnz	r3, 8006c04 <__ieee754_atan2f+0x58>
 8006bf2:	2c02      	cmp	r4, #2
 8006bf4:	d05e      	beq.n	8006cb4 <__ieee754_atan2f+0x108>
 8006bf6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006cc8 <__ieee754_atan2f+0x11c>
 8006bfa:	2c03      	cmp	r4, #3
 8006bfc:	bf08      	it	eq
 8006bfe:	eef0 7a47 	vmoveq.f32	s15, s14
 8006c02:	e7e6      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006c04:	b941      	cbnz	r1, 8006c18 <__ieee754_atan2f+0x6c>
 8006c06:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006ccc <__ieee754_atan2f+0x120>
 8006c0a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8006cd0 <__ieee754_atan2f+0x124>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	bfb8      	it	lt
 8006c12:	eef0 7a40 	vmovlt.f32	s15, s0
 8006c16:	e7dc      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006c18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006c1c:	d110      	bne.n	8006c40 <__ieee754_atan2f+0x94>
 8006c1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c22:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c26:	d107      	bne.n	8006c38 <__ieee754_atan2f+0x8c>
 8006c28:	2c02      	cmp	r4, #2
 8006c2a:	d846      	bhi.n	8006cba <__ieee754_atan2f+0x10e>
 8006c2c:	4b29      	ldr	r3, [pc, #164]	; (8006cd4 <__ieee754_atan2f+0x128>)
 8006c2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c32:	edd4 7a00 	vldr	s15, [r4]
 8006c36:	e7cc      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006c38:	2c02      	cmp	r4, #2
 8006c3a:	d841      	bhi.n	8006cc0 <__ieee754_atan2f+0x114>
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <__ieee754_atan2f+0x12c>)
 8006c3e:	e7f6      	b.n	8006c2e <__ieee754_atan2f+0x82>
 8006c40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c44:	d0df      	beq.n	8006c06 <__ieee754_atan2f+0x5a>
 8006c46:	1a5b      	subs	r3, r3, r1
 8006c48:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8006c4c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8006c50:	da1a      	bge.n	8006c88 <__ieee754_atan2f+0xdc>
 8006c52:	2a00      	cmp	r2, #0
 8006c54:	da01      	bge.n	8006c5a <__ieee754_atan2f+0xae>
 8006c56:	313c      	adds	r1, #60	; 0x3c
 8006c58:	db19      	blt.n	8006c8e <__ieee754_atan2f+0xe2>
 8006c5a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8006c5e:	f000 f91d 	bl	8006e9c <fabsf>
 8006c62:	f000 f847 	bl	8006cf4 <atanf>
 8006c66:	eef0 7a40 	vmov.f32	s15, s0
 8006c6a:	2c01      	cmp	r4, #1
 8006c6c:	d012      	beq.n	8006c94 <__ieee754_atan2f+0xe8>
 8006c6e:	2c02      	cmp	r4, #2
 8006c70:	d017      	beq.n	8006ca2 <__ieee754_atan2f+0xf6>
 8006c72:	2c00      	cmp	r4, #0
 8006c74:	d0ad      	beq.n	8006bd2 <__ieee754_atan2f+0x26>
 8006c76:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8006cdc <__ieee754_atan2f+0x130>
 8006c7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006c7e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8006ce0 <__ieee754_atan2f+0x134>
 8006c82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006c86:	e7a4      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006c88:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006ccc <__ieee754_atan2f+0x120>
 8006c8c:	e7ed      	b.n	8006c6a <__ieee754_atan2f+0xbe>
 8006c8e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006ce4 <__ieee754_atan2f+0x138>
 8006c92:	e7ea      	b.n	8006c6a <__ieee754_atan2f+0xbe>
 8006c94:	ee17 3a90 	vmov	r3, s15
 8006c98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	e797      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006ca2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006cdc <__ieee754_atan2f+0x130>
 8006ca6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006caa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8006ce0 <__ieee754_atan2f+0x134>
 8006cae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006cb2:	e78e      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006cb4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8006ce0 <__ieee754_atan2f+0x134>
 8006cb8:	e78b      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006cba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006ce8 <__ieee754_atan2f+0x13c>
 8006cbe:	e788      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006cc0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006ce4 <__ieee754_atan2f+0x138>
 8006cc4:	e785      	b.n	8006bd2 <__ieee754_atan2f+0x26>
 8006cc6:	bf00      	nop
 8006cc8:	c0490fdb 	.word	0xc0490fdb
 8006ccc:	3fc90fdb 	.word	0x3fc90fdb
 8006cd0:	bfc90fdb 	.word	0xbfc90fdb
 8006cd4:	08006f28 	.word	0x08006f28
 8006cd8:	08006f34 	.word	0x08006f34
 8006cdc:	33bbbd2e 	.word	0x33bbbd2e
 8006ce0:	40490fdb 	.word	0x40490fdb
 8006ce4:	00000000 	.word	0x00000000
 8006ce8:	3f490fdb 	.word	0x3f490fdb

08006cec <__ieee754_sqrtf>:
 8006cec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006cf0:	4770      	bx	lr
	...

08006cf4 <atanf>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	ee10 5a10 	vmov	r5, s0
 8006cfa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006cfe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8006d02:	eef0 7a40 	vmov.f32	s15, s0
 8006d06:	db10      	blt.n	8006d2a <atanf+0x36>
 8006d08:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006d0c:	dd04      	ble.n	8006d18 <atanf+0x24>
 8006d0e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006d12:	eeb0 0a67 	vmov.f32	s0, s15
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8006e50 <atanf+0x15c>
 8006d1c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8006e54 <atanf+0x160>
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	bfd8      	it	le
 8006d24:	eef0 7a40 	vmovle.f32	s15, s0
 8006d28:	e7f3      	b.n	8006d12 <atanf+0x1e>
 8006d2a:	4b4b      	ldr	r3, [pc, #300]	; (8006e58 <atanf+0x164>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	dc10      	bgt.n	8006d52 <atanf+0x5e>
 8006d30:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8006d34:	da0a      	bge.n	8006d4c <atanf+0x58>
 8006d36:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006e5c <atanf+0x168>
 8006d3a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d42:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	dce2      	bgt.n	8006d12 <atanf+0x1e>
 8006d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d50:	e013      	b.n	8006d7a <atanf+0x86>
 8006d52:	f000 f8a3 	bl	8006e9c <fabsf>
 8006d56:	4b42      	ldr	r3, [pc, #264]	; (8006e60 <atanf+0x16c>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	dc4f      	bgt.n	8006dfc <atanf+0x108>
 8006d5c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006d60:	429c      	cmp	r4, r3
 8006d62:	dc41      	bgt.n	8006de8 <atanf+0xf4>
 8006d64:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8006d68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006d6c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006d70:	2300      	movs	r3, #0
 8006d72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006d80:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006e64 <atanf+0x170>
 8006d84:	eddf 5a38 	vldr	s11, [pc, #224]	; 8006e68 <atanf+0x174>
 8006d88:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8006e6c <atanf+0x178>
 8006d8c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006d90:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006d94:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006e70 <atanf+0x17c>
 8006d98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006d9c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8006e74 <atanf+0x180>
 8006da0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006da4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006e78 <atanf+0x184>
 8006da8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006dac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006e7c <atanf+0x188>
 8006db0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006db4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006e80 <atanf+0x18c>
 8006db8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006dbc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006e84 <atanf+0x190>
 8006dc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006dc4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8006e88 <atanf+0x194>
 8006dc8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006dcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006e8c <atanf+0x198>
 8006dd0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006dd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006dd8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006de0:	d121      	bne.n	8006e26 <atanf+0x132>
 8006de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006de6:	e794      	b.n	8006d12 <atanf+0x1e>
 8006de8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006dec:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006df0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006df4:	2301      	movs	r3, #1
 8006df6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006dfa:	e7be      	b.n	8006d7a <atanf+0x86>
 8006dfc:	4b24      	ldr	r3, [pc, #144]	; (8006e90 <atanf+0x19c>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	dc0b      	bgt.n	8006e1a <atanf+0x126>
 8006e02:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8006e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006e0e:	2302      	movs	r3, #2
 8006e10:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	e7af      	b.n	8006d7a <atanf+0x86>
 8006e1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006e1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006e22:	2303      	movs	r3, #3
 8006e24:	e7a9      	b.n	8006d7a <atanf+0x86>
 8006e26:	4a1b      	ldr	r2, [pc, #108]	; (8006e94 <atanf+0x1a0>)
 8006e28:	491b      	ldr	r1, [pc, #108]	; (8006e98 <atanf+0x1a4>)
 8006e2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006e2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006e32:	ed93 0a00 	vldr	s0, [r3]
 8006e36:	ee37 7a40 	vsub.f32	s14, s14, s0
 8006e3a:	ed92 0a00 	vldr	s0, [r2]
 8006e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e42:	2d00      	cmp	r5, #0
 8006e44:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006e48:	bfb8      	it	lt
 8006e4a:	eef1 7a67 	vneglt.f32	s15, s15
 8006e4e:	e760      	b.n	8006d12 <atanf+0x1e>
 8006e50:	3fc90fdb 	.word	0x3fc90fdb
 8006e54:	bfc90fdb 	.word	0xbfc90fdb
 8006e58:	3edfffff 	.word	0x3edfffff
 8006e5c:	7149f2ca 	.word	0x7149f2ca
 8006e60:	3f97ffff 	.word	0x3f97ffff
 8006e64:	3c8569d7 	.word	0x3c8569d7
 8006e68:	3d4bda59 	.word	0x3d4bda59
 8006e6c:	bd6ef16b 	.word	0xbd6ef16b
 8006e70:	3d886b35 	.word	0x3d886b35
 8006e74:	3dba2e6e 	.word	0x3dba2e6e
 8006e78:	3e124925 	.word	0x3e124925
 8006e7c:	3eaaaaab 	.word	0x3eaaaaab
 8006e80:	bd15a221 	.word	0xbd15a221
 8006e84:	bd9d8795 	.word	0xbd9d8795
 8006e88:	bde38e38 	.word	0xbde38e38
 8006e8c:	be4ccccd 	.word	0xbe4ccccd
 8006e90:	401bffff 	.word	0x401bffff
 8006e94:	08006f40 	.word	0x08006f40
 8006e98:	08006f50 	.word	0x08006f50

08006e9c <fabsf>:
 8006e9c:	ee10 3a10 	vmov	r3, s0
 8006ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ea4:	ee00 3a10 	vmov	s0, r3
 8006ea8:	4770      	bx	lr
	...

08006eac <nanf>:
 8006eac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006eb4 <nanf+0x8>
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	7fc00000 	.word	0x7fc00000

08006eb8 <_init>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	bf00      	nop
 8006ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ebe:	bc08      	pop	{r3}
 8006ec0:	469e      	mov	lr, r3
 8006ec2:	4770      	bx	lr

08006ec4 <_fini>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr
